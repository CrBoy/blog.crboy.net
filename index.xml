<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CrBoy&#39;s Blog</title>
    <link>https://blog.crboy.net/</link>
    <description>Recent content on CrBoy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>本 blog 文章除另有註明外，皆以 CC BY-SA 4.0 國際版授權條款釋出</copyright>
    <lastBuildDate>Sun, 25 Jun 2023 01:37:57 +0800</lastBuildDate>
    
        <atom:link href="https://blog.crboy.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>拖了很多年的新 blog</title>
        <link>https://blog.crboy.net/drafts/%E6%8B%96%E4%BA%86%E5%BE%88%E5%A4%9A%E5%B9%B4%E7%9A%84%E6%96%B0-blog/</link>
        <pubDate>Sun, 25 Jun 2023 01:37:57 +0800</pubDate>
        
        <guid>https://blog.crboy.net/drafts/%E6%8B%96%E4%BA%86%E5%BE%88%E5%A4%9A%E5%B9%B4%E7%9A%84%E6%96%B0-blog/</guid>
        <description>CrBoy&#39;s Blog https://blog.crboy.net/drafts/%E6%8B%96%E4%BA%86%E5%BE%88%E5%A4%9A%E5%B9%B4%E7%9A%84%E6%96%B0-blog/ -&lt;p&gt;之前受不了 Blogger 用起來麻煩，而且想要自己掌握所有文章與整個 blog site，跳槽到了 Hexo。但這已經是 7 年前的事了耶&amp;hellip;..XD&lt;/p&gt;
&lt;p&gt;當時其實沒有做完，雖然把文章都轉成 markdown 了，而且也建了測試 site（叫做 hexo.crboy.net，之後應該會砍掉），但一直想要自己做好自己的 theme 之後再正式部署。這一拖就是 7 年&amp;hellip;
後來其實也對 Hexo 失去興趣了，因為知道有個新東西叫做 Hugo，而且效能比本來就快的 Hexo 好很多（當時選擇 Hexo 的原因之一是 Hexo 比起基於 Ruby 跟 Jekyll 的 Octopress 還快很多），也玩了一陣子，感覺真的不錯，但也是因為沒有把 theme 搞好而放置。&lt;/p&gt;
&lt;p&gt;最近端午連假，剛好有點空，就來整理一下。為了避免重蹈覆轍，這次決定挑一個現成的 theme 硬上。至少&amp;hellip;至少提供自己一個可以寫文章的平台吧。&lt;/p&gt;
&lt;p&gt;總之，今天終於擺脫 Blogger，改用 Hugo 產生的 static site 來當 blog 啦！過去的文章都有做 alias，希望連結沒壞。不過留言我就不想管了，一方面很麻煩，另一方面留言數沒有很多，就放棄它了。之後（如果有空的話XDDD）會加入 Disqus 或其他類似產品來提供留言功能。不過其實，現在已經不比當年，很多有價值的討論都不會發生在 blog 裡面了，也許不提供留言功能也無所謂吧？&lt;/p&gt;
- https://blog.crboy.net/drafts/%E6%8B%96%E4%BA%86%E5%BE%88%E5%A4%9A%E5%B9%B4%E7%9A%84%E6%96%B0-blog/ - 本 blog 文章除另有註明外，皆以 CC BY-SA 4.0 國際版授權條款釋出</description>
        </item>
    
    
    
        <item>
        <title>神奇的 Git Subtree</title>
        <link>https://blog.crboy.net/posts/amazing-git-subtree/</link>
        <pubDate>Thu, 29 Sep 2016 03:01:12 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/amazing-git-subtree/</guid>
        <description>CrBoy&#39;s Blog https://blog.crboy.net/posts/amazing-git-subtree/ -&lt;p&gt;一直以來只知道 git 可以透過 git-submodule 管理巢狀 git 專案。也就是一個大專案中有小專案，而這兩個專案要分別用 git 做版本控制的狀況。這會發生在專案有可以抽出來跟其他專案共用的部分，或是專案需要引入一個外部現有的 git 專案的時候。舉例來說，我的 vimrc 裡面有 snippets，這個 snippets 是值得被另外拉出來成為一個專案的。又或是像 hexo，我要自訂 theme，所以我 fork 了 icarus 這個 theme 來改，但需要把它放進我的大 hexo 專案中。&lt;/p&gt;
&lt;p&gt;用 submodule 的做法其實滿麻煩的，它的原理是：大專案紀錄某目錄是一個 submodule，所以大專案就不 track 該目錄的變更，而是 track 該目錄的 HEAD commit。該目錄的內容變更則交給他自己 track。也就是說，如果修改了小專案的內容，需要先去小專案裡面把修改 commit 進去後，再去大專案把小專案的新 commit id 給 commit 進去。光用講的都覺得混亂&amp;hellip;&lt;/p&gt;
&lt;p&gt;有天發現了 git-subtree 是個可以解決類似問題的工具，但差別在於 subtree 不需要事先指定哪個目錄是子專案，只要在需要的時候處理即可。什麼是需要的時候呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要把子專案切出去的時候（通常只會切一次）&lt;/li&gt;
&lt;li&gt;要把子專案在本地端的變更丟出去的時候&lt;/li&gt;
&lt;li&gt;要把一個專案放進來變成子專案的時候（通常只會放一次）&lt;/li&gt;
&lt;li&gt;要把子專案在外面的變更拉進來的時候&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了「需要的時候」以外，子專案就像是（其實根本就是）大專案的一部分，用原有的方式去操作 git 即可，相當單純！&lt;/p&gt;
&lt;p&gt;我覺得以我找到的資料來說，&lt;a href=&#34;http://yutin.logdown.com/posts/188306-git-subtree-total-addendum-library&#34;&gt;Git SubTree 共編 Library&lt;/a&gt; 這篇文章是講得比較清楚易懂的，有些別的文章會舉例錯誤或不知所云&amp;hellip;.XD 不過我認為需要搭配 &lt;a href=&#34;https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt&#34;&gt;man page&lt;/a&gt; 服用會比較能理解。&lt;/p&gt;
&lt;p&gt;下面就以 hexo 為例，練習把原本用 git-submodule 管理的 theme（crboy-icarus）改成用 git-subtree 管理，並推到相同的 remote repository 去吧。&lt;/p&gt;
&lt;p&gt;首先把 theme 的 origin 記下來，然後刪除這個 submodule&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;### 記下原有的 remote，方便後面操作（非必要）
$ cat .gitmodules
[submodule &amp;#34;themes/crboy-icarus&amp;#34;]
    path = themes/crboy-icarus
	url = https://github.com/CrBoy/hexo-theme-icarus

### 移除 submodule 並 commit
$ git submodule deinit themes/crboy-icarus
$ git rm themes/crboy-icarus
$ git commit

### 將原有的 remote 加入，並新增為 subtree
$ git remote add theme-crboy-icarus https://github.com/CrBoy/hexo-theme-icarus
$ git subtree add -P themes/crboy-icarus theme-crboy-icarus master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完成之後，原本的 submodule 現在已經成為上層專案的一部份了，任何修改都可以直接 commit 進上層專案就好。如果要把變更送到 remote theme-crboy-icarus 去，可以這樣做：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git subtree push -P themes/crboy-icarus theme-crboy-icarus master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果這個子專案在別地方被更新了，那可以這樣把更新拉進來：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git subtree pull -P themes/crboy-icarus theme-crboy-icarus master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;總結一下：用 subtree 當然是也有一些缺點的，例如子專案的東西會在母專案裡也存一份，所以會讓 git repo 變大。但這問題在現代來說不是很嚴重，整體而言我認為 subtree 比 submodule 方便得多，我會傾向使用 subtree。至於 submodule 的使用情境，目前只想到要 include 一個外部專案，而且我確定完全不會去改它的時候才比較可能使用吧。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt&#34;&gt;git-subtree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yutin.logdown.com/posts/188306-git-subtree-total-addendum-library&#34;&gt;Git SubTree 共編 Library&lt;/a&gt;（我覺得這篇寫得滿好懂的，是我找了很多篇教學中最好懂的一篇）&lt;/li&gt;
&lt;/ul&gt;
- https://blog.crboy.net/posts/amazing-git-subtree/ - 本 blog 文章除另有註明外，皆以 CC BY-SA 4.0 國際版授權條款釋出</description>
        </item>
    
    
    
        <item>
        <title>CloudFlare 的 Flexible SSL</title>
        <link>https://blog.crboy.net/posts/cloudflare-flexible-ssl/</link>
        <pubDate>Wed, 28 Sep 2016 03:09:57 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/cloudflare-flexible-ssl/</guid>
        <description>CrBoy&#39;s Blog https://blog.crboy.net/posts/cloudflare-flexible-ssl/ -&lt;p&gt;最近認真的把 blog 放上 github pages，算是差不多初始化完成了。不過 https 在這年頭是個很重要的問題啊&amp;hellip;.因為我設定了 CNAME，所以目前的網址是 hexo.crboy.net，但是如果直接連到 &lt;a href=&#34;https://hexo.crboy.net&#34;&gt;https://hexo.crboy.net&lt;/a&gt; 的話，會拿到一張 github.com 自己的 ssl 憑證，這張憑證簽給了許多 domain，其中包含 *.github.io，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;github-ssl-cert.png&#34; alt=&#34;github-ssl-cert&#34;&gt;&lt;/p&gt;
&lt;p&gt;雖然對於 github pages 本來給我的 crboy.githb.io 用起來是沒問題，但我自訂的 domain 可就沒辦法了。&lt;/p&gt;
&lt;p&gt;找了一下有沒有現成解決方案，找到這篇文章：&lt;a href=&#34;https://sheharyar.me/blog/free-ssl-for-github-pages-with-custom-domains/&#34;&gt;Set Up SSL on Github Pages With Custom Domains for Free&lt;/a&gt;，裡面教你透過 CloudFlare 的 Flexible SSL 來設定，後半段則是教你怎麼強制使用 SSL。但我只想要單純支援 SSL，不反對 user 使用 http 連線，所以後半段就不理他了。進一步找「cloudflare flexible ssl」找到這篇文章：&lt;a href=&#34;https://sofree.cc/cloudflare-free-ssl/&#34;&gt;[免費SSL]Cloudflare 免費憑證讓網站綁上SSL加密連線(https)&lt;/a&gt;，得知原理其實很簡單：讓流量通過 CloudFlare（也就是 enable 他的 cdn 功能），CloudFlare 會幫你對外提供可用的 SSL 憑證。&lt;/p&gt;
&lt;p&gt;設定方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把自己的 domain 的 DNS 服務放在 CloudFlare 上&lt;/li&gt;
&lt;li&gt;啟用該 domain name 的 CDN 服務&lt;/li&gt;
&lt;li&gt;到 Page Rules 新增一個 rule：URL match 設定為 &lt;code&gt;DOMANE_NAME/*&lt;/code&gt;（例如 &lt;code&gt;hexo.crboy.net/*&lt;/code&gt;），setting 新增 SSL 並指定為 flexible&lt;/li&gt;
&lt;li&gt;Save and Deploy 之後就好了，剩下的就是時間問題，我自己設定的時候是馬上就可以用了&amp;hellip;.（運氣好）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不過倒是有個小小的問題&amp;hellip;..這張憑證簽給好多 domain 啊&amp;hellip;..而且除了我的 domain 以外也有別人的 domain，而且都是 wildcard&amp;hellip;.覺得有點擔心呢XD&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cf-flexible-ssl-cert.png&#34; alt=&#34;cf-flexible-ssl-cert&#34;&gt;&lt;/p&gt;
&lt;p&gt;另一個方式（需要花點錢）是透過 AWS 的 CloudFront（也是 CDN 服務），他也有一樣模式的東西，AWS 會幫你簽一張憑證，不過這憑證是專門簽給那個 domain 的。實際上是在 AWS Certificate Manager (ACM) 中自己決定要簽給哪些 domain，AWS 會寄信給 domain 的管理者請求 approve。雖然這樣安心多了，不過要花錢&amp;hellip;.就算了吧XD&lt;/p&gt;
- https://blog.crboy.net/posts/cloudflare-flexible-ssl/ - 本 blog 文章除另有註明外，皆以 CC BY-SA 4.0 國際版授權條款釋出</description>
        </item>
    
    
    
        <item>
        <title>發現一個滿方便的 ip 資訊查詢：ipinfo.io</title>
        <link>https://blog.crboy.net/posts/ipinfo.io/</link>
        <pubDate>Tue, 27 Sep 2016 18:45:49 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/ipinfo.io/</guid>
        <description>CrBoy&#39;s Blog https://blog.crboy.net/posts/ipinfo.io/ -&lt;p&gt;以前都用 orange.tw 在查 ip，雖然自己也寫了一個 ip.crboy.net，不過因為實在不想花錢養一台機器，所以就把服務給停掉了。&lt;/p&gt;
&lt;p&gt;剛剛發現 ipinfo.io 這個網站，用瀏覽器開的話相關說明也都有了。但如果直接用 &lt;code&gt;curl&lt;/code&gt; 送 request 的話，就可以拿到自己的 ip 的相關資訊（包含地點、國家等）。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -D- ipinfo.io
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Content-Type: application/json; charset=utf-8
Date: Tue, 27 Sep 2016 10:33:36 GMT
Server: nginx/1.8.1
Set-Cookie: first_referrer=; Path=/
X-Content-Type-Options: nosniff
Content-Length: 219
Connection: keep-alive

{
  &amp;#34;ip&amp;#34;: &amp;#34;119.14.25.111&amp;#34;,
  &amp;#34;hostname&amp;#34;: &amp;#34;host-111.25-14-119.dynamic.totalbb.net.tw&amp;#34;,
  &amp;#34;city&amp;#34;: &amp;#34;Taipei&amp;#34;,
  &amp;#34;region&amp;#34;: &amp;#34;&amp;#34;,
  &amp;#34;country&amp;#34;: &amp;#34;TW&amp;#34;,
  &amp;#34;loc&amp;#34;: &amp;#34;25.0392,121.5250&amp;#34;,
  &amp;#34;org&amp;#34;: &amp;#34;AS9416 Hoshin Multimedia Center Inc.&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以查詢特定 ip 的資訊：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -D- ipinfo.io/8.8.8.8
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Content-Type: application/json; charset=utf-8
Date: Tue, 27 Sep 2016 10:36:40 GMT
Server: nginx/1.8.1
Set-Cookie: first_referrer=; Path=/
X-Content-Type-Options: nosniff
Content-Length: 160
Connection: keep-alive

{
  &amp;#34;ip&amp;#34;: &amp;#34;8.8.8.8&amp;#34;,
  &amp;#34;hostname&amp;#34;: &amp;#34;No Hostname&amp;#34;,
  &amp;#34;city&amp;#34;: &amp;#34;&amp;#34;,
  &amp;#34;region&amp;#34;: &amp;#34;&amp;#34;,
  &amp;#34;country&amp;#34;: &amp;#34;US&amp;#34;,
  &amp;#34;loc&amp;#34;: &amp;#34;37.7510,-97.8220&amp;#34;,
  &amp;#34;org&amp;#34;: &amp;#34;AS15169 Google Inc.&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;甚至 fetch 特定欄位資料：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -D- ipinfo.io/8.8.8.8/country
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Content-Type: text/html; charset=utf-8
Date: Tue, 27 Sep 2016 10:37:18 GMT
Server: nginx/1.8.1
Set-Cookie: first_referrer=; Path=/
Content-Length: 3
Connection: keep-alive

US
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -D- ipinfo.io/country
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Content-Type: text/html; charset=utf-8
Date: Tue, 27 Sep 2016 10:37:22 GMT
Server: nginx/1.8.1
Set-Cookie: first_referrer=; Path=/
Content-Length: 3
Connection: keep-alive

TW
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;還有一些好玩的&amp;hellip;.像是：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -D- ipinfo.io/127.0.0.1
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Content-Type: application/json; charset=utf-8
Date: Tue, 27 Sep 2016 10:39:36 GMT
Server: nginx/1.8.1
Set-Cookie: first_referrer=; Path=/
X-Content-Type-Options: nosniff
Content-Length: 37
Connection: keep-alive

{
  &amp;#34;ip&amp;#34;: &amp;#34;127.0.0.1&amp;#34;,
  &amp;#34;bogon&amp;#34;: 1
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -D- ipinfo.io/255.255.255.255
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Content-Type: application/json; charset=utf-8
Date: Tue, 27 Sep 2016 10:40:46 GMT
Server: nginx/1.8.1
Set-Cookie: first_referrer=; Path=/
X-Content-Type-Options: nosniff
Content-Length: 72
Connection: keep-alive

{
  &amp;#34;ip&amp;#34;: &amp;#34;255.255.255.255&amp;#34;,
  &amp;#34;hostname&amp;#34;: &amp;#34;No Hostname&amp;#34;,
  &amp;#34;bogon&amp;#34;: 1
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;bogon: 1&lt;/code&gt; 根據&lt;a href=&#34;https://en.wikipedia.org/wiki/Bogon_filtering&#34;&gt;維基百科上 Bogon filtering&lt;/a&gt; 的描述，看來是有擋掉不應該被查詢的 ip。不過&amp;hellip;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -D- ipinfo.io/192.168.1.1
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Content-Type: application/json; charset=utf-8
Date: Tue, 27 Sep 2016 10:39:56 GMT
Server: nginx/1.8.1
Set-Cookie: first_referrer=; Path=/
X-Content-Type-Options: nosniff
Content-Length: 184
Connection: keep-alive

{
  &amp;#34;ip&amp;#34;: &amp;#34;192.168.1.1&amp;#34;,
  &amp;#34;hostname&amp;#34;: &amp;#34;ip-192-168-1-1.ap-southeast-1.compute.internal&amp;#34;,
  &amp;#34;city&amp;#34;: &amp;#34;Momoyama-cho&amp;#34;,
  &amp;#34;region&amp;#34;: &amp;#34;Kyoto&amp;#34;,
  &amp;#34;country&amp;#34;: &amp;#34;JP&amp;#34;,
  &amp;#34;loc&amp;#34;: &amp;#34;34.9500,135.7830&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看起來還是有些特別的 ip 可以查XD 原來這台主機放在 AWS EC2 的日本機房嗎&amp;hellip;&amp;hellip;（思）&lt;/p&gt;
- https://blog.crboy.net/posts/ipinfo.io/ - 本 blog 文章除另有註明外，皆以 CC BY-SA 4.0 國際版授權條款釋出</description>
        </item>
    
    
    
        <item>
        <title>About This Blog</title>
        <link>https://blog.crboy.net/pages/about/</link>
        <pubDate>Tue, 27 Sep 2016 17:20:42 +0000</pubDate>
        
        <guid>https://blog.crboy.net/pages/about/</guid>
        <description>CrBoy&#39;s Blog https://blog.crboy.net/pages/about/ -&lt;p&gt;我是小畢，網路常用代號 CrBoy。&lt;/p&gt;
&lt;p&gt;我換過好多 blog 系統，可是每個都不太滿意。以前用過 &lt;a href=&#34;https://tw.wordpress.org/&#34;&gt;WordPress&lt;/a&gt; 跟 &lt;a href=&#34;https://blogger.com/&#34;&gt;Blogger&lt;/a&gt;，也曾經嘗試過 &lt;a href=&#34;https://logdown.com/&#34;&gt;Logdown&lt;/a&gt;、&lt;a href=&#34;https://www.tumblr.com/&#34;&gt;Tumblr&lt;/a&gt;，但總是因為一些可能不是很重要的小地方放棄了。
其實寫 blog 是希望可以把一些想法或是研究的東西記錄下來，同時也可以分享給其他人，還有未來的自己。&lt;/p&gt;
&lt;p&gt;這次我改用 &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;，主要看上的是可以用 markdown 寫文章，還可以自訂外觀（Logdown 不能自訂外觀），而且 generate 之後可以放在各種網頁伺服器上，或是 GitHub pages、AWS S3 之類的。總之感覺很方便XD 唯一有一點，過去我一直不傾向使用這一類的 static site generator，像是 &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; 之類（我承認我之前看到 Octopress 的時候很心動），是因為沒辦法在線上編輯器直接編輯文章。不過後來想想，其實我的文章產量實在夠少的（自己懶惰），不是在自己電腦上其實也根本不想寫文章。所以有沒有手機 app 或是能不能線上編輯好像都不是非常重要，如果真的要用手機紀錄東西就先記在筆記裡面就好了。&lt;/p&gt;
&lt;p&gt;這是這個 blog 的誕生，我會努力的把以前寫的文章慢慢轉成 markdown，雖然說放棄了以前的 SEO，但反正我每次換 blog system 都在放棄 SEO，我早就已經放棄 SEO 了啦XD&lt;/p&gt;
- https://blog.crboy.net/pages/about/ - 本 blog 文章除另有註明外，皆以 CC BY-SA 4.0 國際版授權條款釋出</description>
        </item>
    
    
    
        <item>
        <title>Hexo 學習筆記 - 套用 Icarus 佈景</title>
        <link>https://blog.crboy.net/posts/hexo-notes-apply-icarus/</link>
        <pubDate>Mon, 21 Mar 2016 18:04:54 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/hexo-notes-apply-icarus/</guid>
        <description>CrBoy&#39;s Blog https://blog.crboy.net/posts/hexo-notes-apply-icarus/ -&lt;p&gt;挑了一下主題，暫時就用 Icarus 這個樣式吧XD&lt;/p&gt;
&lt;p&gt;不過在 config 的時候遇到問題，怎麼改都沒效。後來找到&lt;a href=&#34;http://wuchong.me/blog/2015/03/12/support-jacman-to-Hexo-3/&#34;&gt;這篇文章&lt;/a&gt;，裡面寫到這段話：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo-config 方法会去 theme 主题下的 _config.yml 中查找参数中的配置项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原來是會讀取 &lt;strong&gt;theme 底下的&lt;/strong&gt; &lt;code&gt;_config.yml&lt;/code&gt; 啊！難怪我改 Hexo 的 &lt;code&gt;_config.yml&lt;/code&gt;（根目錄那一個）沒辦法起作用。不過奇怪的是，像是 &lt;code&gt;customize.profile.author&lt;/code&gt; 之類的設定，在 Hexo 的 config 中修改，會起作用。不曉得 Hexo 在這邊是怎麼處理的&amp;hellip;&lt;/p&gt;
- https://blog.crboy.net/posts/hexo-notes-apply-icarus/ - 本 blog 文章除另有註明外，皆以 CC BY-SA 4.0 國際版授權條款釋出</description>
        </item>
    
    
    
        <item>
        <title>搬家到 Hexo</title>
        <link>https://blog.crboy.net/posts/move-to-hexo/</link>
        <pubDate>Sun, 20 Mar 2016 05:47:04 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/move-to-hexo/</guid>
        <description>CrBoy&#39;s Blog https://blog.crboy.net/posts/move-to-hexo/ -&lt;p&gt;今天突然覺得，應該要（再）開始好好寫 blog，想了一下，覺得實在受不了 blogger 的鳥氣。
以前評估過 Octopress 跟 Hexo，當時覺得不能用手機發文，或是用別台電腦發文，實在滿討厭的，就暫不考慮使用。
不過想到我現在的狀況&amp;hellip;.連發文都懶XD
轉念一想，其實用手機的時候，如果想寫文字，可以先筆記下來（比方說 Evernote），等到拿到電腦再好好整理文章啊！
這樣也可以提高我發文的品質，而且可以好好整理文字內容。感覺這樣滿不錯的。&lt;/p&gt;
&lt;p&gt;於是我重新找了一下，發現這類工具好像還是以 Octopress 跟 Hexo 為大宗，而且 Hexo 據說比較易用，還是台灣人做的，當然要支持一下。（而且聽說 page render 的效能差很多&amp;hellip;.XD）
那麼，就開始學 Hexo 該怎麼用了！&lt;/p&gt;
- https://blog.crboy.net/posts/move-to-hexo/ - 本 blog 文章除另有註明外，皆以 CC BY-SA 4.0 國際版授權條款釋出</description>
        </item>
    
    
    
        <item>
        <title>HTTP 通訊簡介</title>
        <link>https://blog.crboy.net/posts/http-how-it-works/</link>
        <pubDate>Mon, 10 Aug 2015 16:19:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/http-how-it-works/</guid>
        <description>CrBoy&#39;s Blog https://blog.crboy.net/posts/http-how-it-works/ -&lt;p&gt;從網址列按下 enter 後，到網頁畫面顯示出來，這中間發生了哪些事？&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;我一直很喜歡的一個面試題，我決定今天把它拿出來告訴大家，歡迎參考，條件是如果有什麼有趣的回饋請一定要讓我知道！:P&lt;br&gt;
每次面試工程師 (敝公司會接觸到的是 web 前後端以及 mobile app 工程師) 的時候，我幾乎都會問這個問題：「從網址列按下 enter 後，到網頁畫面顯示出來，這中間發生了哪些事？」這是一個好像很空泛卻又很實際的問題，我則是認為這個問題可以問出受試者對哪個領域較熟悉。&lt;br&gt;
舉例來說，如果對方說了「瀏覽器會從 server 讀網頁跟 CSS 還有 JavaScript 回來，然後根據 HTML 產生 DOM，並根據 CSS 裡面描述的規則，對 DOM 中的元素進行排版，並且執行 JavaScript」這樣的話，那你可以猜測他應該比較熟悉前端。如果對方說的是「瀏覽器會送出 request 到 server，server 收到之後會先執行指定的 controller 裡面的 method，然後去存取資料庫把資料撈出來並顯示 view 回傳給瀏覽器」，那這個人應該曾經用某個後端的 framework 寫過網頁。又或是「server 會執行指定的 php 檔案，然後把執行結果顯示在瀏覽器上」，他可能是個比較資淺的 php 工程師 (因為講得很粗略)。我碰過一個有趣的例子，他跟我說的是「瀏覽器會先去找 DNS，解出主機的 IP&amp;hellip;」，那表示他至少知道 DNS 這個東西XD。&lt;br&gt;
總之，這個問題其實相當開放的，牽扯到的東西也滿多的，下面就來講講我會怎麼對付這個問題。&lt;/p&gt;
&lt;h1 id=&#34;osi-網路七層架構&#34;&gt;OSI 網路七層架構&lt;/h1&gt;
&lt;p&gt;現在的網路世界，可以被分成很多層，每一層各自有他的功能。參考&lt;a href=&#34;https://en.wikipedia.org/wiki/OSI_model&#34;&gt;維基百科上的 OSI 頁面&lt;/a&gt;，看出可分為 physical, data link, network, transport, session, presentation, application 等 layer。由於這個問題屬於較上層相關的問題，所以通常會傾向從 application layer 的角度回答，也就是關於 HTTP protocol 本身，以及處理 HTTP protocol 的應用程式等等。不過，由於網路本身也是很重要的，所以如果能夠從 SSL, TCP/IP, DNS, 防火牆等等角度去敘述，也會是個有趣的答案。&lt;/p&gt;
&lt;h1 id=&#34;網路方面的回答&#34;&gt;網路方面的回答&lt;/h1&gt;
&lt;p&gt;HTTP 一般走的是 TCP 的 port 80，HTTPS 一般是走 TCP port 443，有些 web server 可能會因為特殊原因開在 8000 或是 8080 等等，都滿常見的。不過其實走哪個 port 都可以，只要是 TCP 就好。(唔，其實我不知道 HTTP 能不能建構於 UDP 之上，我想技術上是可行的，但是有沒有大家共通的實作就是個問題了，所以這邊不討論)&lt;br&gt;
如果提到了 TCP，那就可以進一步討論到 TCP 的 3-way handshaking，至少一般會了解到 SYN, SYN/ACK, ACK 這個過程。至於關閉連線的 RST&amp;hellip;我承認我忘了 (這篇文章是在搭車的時候抽時間寫的，沒有網路就不查資料了XD)，大致上是 RST, ACK + RST, ACK 之類的的吧&amp;hellip;&amp;hellip;.&lt;br&gt;
再底層有 IP 嘛，那就可以討論到像是 DNS 的解析 (DNS 用什麼 protocol 傳送資料呢？:P)，拿到 IP 之後，資料要怎麼送出去？路由 (routing) 可能經過什麼地方？再更進一步，IP 的封包有沒有可能偽造來源？&lt;/p&gt;
&lt;h1 id=&#34;關於-server-端的回答&#34;&gt;關於 server 端的回答&lt;/h1&gt;
&lt;p&gt;由於應用層有很多部分可以討論，所以分開來講。server 上應該會有個 web server 去 listen port 80 (又跟 TCP 扯上關係了！)，這個 server 可能是 apache、nginx、IIS 或是 lighttpd 之類的 general 的 web server，又或者是你的應用程式直接就自己 listen 80 port，比方說 rails 的 dev server: webrick，或是 thin, unicorn、php 的 php-fpm 等等。&lt;/p&gt;
&lt;h2 id=&#34;web-server&#34;&gt;Web Server&lt;/h2&gt;
&lt;p&gt;web server 是負責接受 http request 的。在 web server 的後面，需要有人負責處理 http request。有可能你的 web server 本身就具備處理 request 的能力，比方說裝了 mod_php 的 apache，或是有 passenger 的 nginx 等等。又或者 web server 只作為一個 reverse proxy，將 http request 轉送給知道怎麼處理的 server。轉送的方式可能透過某個 port，又或是某個 socket file (如果知道這個，應該是有管過或設定過 server 的人)。&lt;/p&gt;
&lt;h2 id=&#34;application-server&#34;&gt;Application Server&lt;/h2&gt;
&lt;p&gt;那麼 http request 要怎麼處理呢？由於 http request 就只是一串文字，包含了 header 跟 body (或說 content、payload，我不確定有沒有正式正確名稱)，一般是將它解析、轉換成特殊格式，好讓後面的應用程式方便處理。這邊就會有些被定義好的界面，像是以前常聽到的 CGI、FastCGI、uWSGI、Rack&amp;hellip;等等，而我們一般寫的 web 應用程式就是接上這些界面去實作，而不用自己 parse 純文字的 http protocol。&lt;br&gt;
進入真正的 user 寫的 application 這邊，以我自身的經驗又可根據是否使用 framework 分成兩類。&lt;/p&gt;
&lt;h2 id=&#34;不使用-framwork-的-application&#34;&gt;不使用 framwork 的 application&lt;/h2&gt;
&lt;p&gt;不用 framework 的經典例子大概就是 php 了。PHP 因為以前 mod_php 安裝很方便 (至少我是這樣覺得啦)，所以到現在依然很紅。幾乎所有 php 入門書都教你寫單純的 php 去產生網頁，簡單來說就是&amp;hellip;.連到哪個路徑就執行哪個檔案裡的程式碼，然後把印出來的結果傳回給 client 端。寫單純 php 的人，大概都用過 $_GET, $_POST 這些 global array，這些 array 的值就是 application server (或是 web server 的某個 module，如 mod_php) 幫你設定好，傳進來給你的 application 用的。最後印出來的資料 (比方說透過 &lt;code&gt;echo &amp;quot;&amp;lt;p&amp;gt;這是一個 &amp;lt;marquee&amp;gt;php 網頁&amp;lt;/marquee&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;&lt;/code&gt; 印出來的) 也會交由他們負責回傳給 client。&lt;br&gt;
(碎碎念：就是因為這些東西包裝得太好了，才會一堆人連 server-side 跟 client-side 的程式執行順序都搞不清楚&amp;hellip;)&lt;/p&gt;
&lt;h2 id=&#34;使用-framwork-的-application&#34;&gt;使用 framwork 的 application&lt;/h2&gt;
&lt;p&gt;用 framework 的話，狀況就複雜多了，程式的執行順序要看 framework 怎麼設計。以我接觸過的 framework 而言，會有一個單一進入點，request 進來之後，會先進入一個 router，不是網路上的路由器那個 router，是 URI router。URI router 的用途是根據 request 的 http method、URI (簡單說就是整串網址) (通常是這兩個) 決定要執行哪一段程式。以 (Web-)MVC framework 來說，就是某個特定的 controller 的某個特定的 method。或是像有些 framwork 的設計，讓你直接把 method、URI 跟 controller 寫在一起 (像是 Sinatra, Flask)，也是還不賴這樣。又或是像 ASP.net WebForm 的設計，會直接讀取到路徑對應的 .aspx 檔案，然後把它 render 出來，並把程式部分的那些 handler 用奇妙的方式塞進 render 出來的 html 裡面&amp;hellip;我是一直覺得這樣很亂我都被搞混啦XD&lt;br&gt;
題外話：其實雖然現在公司寫 rails，我也不是完全清楚 rails 完整的執行流程細節&amp;hellip;比方說 app server (unicorn) 進到 rails 的進入點是哪邊 (我只知道 config.ru 是 rack 的 initialize)，他又是根據什麼去找到 routes.rb 這些的&amp;hellip;&lt;br&gt;
進到 controller 以後，就會&amp;hellip;.執行那個 method XD。不過如果是 rails developer 的話，可能會提到會先執行 ApplicationController 裡面寫的某些東西，或是會用到 before_action 之類的。當然 controller 中會去存取 model，然後 render view 之類的，這些就是各 framework 的設計不同的地方了&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;application-server-跟-application-綁在一起的狀況&#34;&gt;Application Server 跟 Application 綁在一起的狀況&lt;/h2&gt;
&lt;p&gt;其實 application server 也不一定會跟 application 分開，比方說有些人可能喜歡自己處理 raw HTTP request，自己用 C 語言寫個程式，開了 socket 收文字資訊自己 parse&amp;hellip;又或是像 node 世界，有些簡單的小應用就自己開 socket 自己處理資訊這樣 (但我不會寫 node，如果有誤解的話歡迎指教)。&lt;/p&gt;
&lt;h1 id=&#34;關於-client-端的回答&#34;&gt;關於 client 端的回答&lt;/h1&gt;
&lt;p&gt;Server 端講完了，來講講我比較不熟的 client 端 (又稱為前端、瀏覽器端)。前端嘛&amp;hellip;就把 HTML 建成 DOM，然後 parse 完 CSS 把它裡面的規則拿來排版，最後再執行 JavaScript。(完)&lt;br&gt;
&amp;hellip;.開玩笑的，不過這邊我比較組織不起來，可能有點雜亂。一開始瀏覽器會把 user 輸入的資訊 (網址、表單內容) 組合成 HTTP request，這個 request 是一個單純的文字串流，然後就透過 TCP 送出去了&amp;hellip;經過 server 端的一番大戰之後，瀏覽器會收到一個回應 (http response)，通常內容會是一份 html 資料啦，這時候瀏覽器就會開始讀取、解析這個 html。&lt;br&gt;
HTML 中會有些 tag 參考到其他資料嘛，比方說像是 link (通常用來讀 css)、script (通常用來參考外部 JavaScript。VBScript？可以吃嗎？)、img (通常用來放圖片)，當瀏覽器解析到這些外部資源的時候，就會再開一個連線，去讀取外部資源 (簡單來說意思是，下載那些檔案)。當瀏覽器讀到 js 檔案，或是一段 js 程式碼的時候，會停下解析 html 的工作，去執行 js。&lt;br&gt;
瀏覽器會在解析的時候就執行 js 的這個事實滿重要的，因為很容易害人踩到雷XD。如果你把 js 放在 html 的 head 中，當你執行到這段 js 的時候，html 的 body 根本還沒有讀到，也就是說 DOM 根本還沒建立。如果在 js 中企圖去操作 DOM (比方說，想用 jQuery 找出某個 DOM element 並修改它)，那會連找都找不到&amp;hellip;這也就是為什麼很多 jQuery 範例都會要你用 &lt;code&gt;$(function(){ /*...*/ })&lt;/code&gt; 把要做的事情包裝起來。&lt;br&gt;
再講個題外話，如果瀏覽器是透過 js 送出 request 的話，它應該是透過 XHR (XmlHttpRequest) 物件去送的，也就是俗稱的 AJAX request。這個狀況下，server 回的就可能不是 html 了。一般狀況可能會拿到一個 json 格式的資料，又或者是 xml 格式的資料，當然也有拿到 html 片段的 (像是 ASP.Net 的 UpdatePanel，就是個會去拿 HTML 片段回來顯示的玩意兒)。在處理上的話，就不會把焦點放在 rendering，而會放在 json/xml 格式的解析，還有針對 load 回來的資料的處理了。&lt;br&gt;
對了，關於瀏覽器這邊，由於瀏覽器發展也是滿快的，我所理解的知識說不定已經過時了，也歡迎各方大德多多指教。&amp;lt;()&amp;gt;&lt;/p&gt;
&lt;h1 id=&#34;關於-http-protocol-本身的回答&#34;&gt;關於 HTTP protocol 本身的回答&lt;/h1&gt;
&lt;p&gt;上面其實提到好幾次會扯到 HTTP protocol 的東西，像是 request/response，或是像資料格式之類的。有些人也許會注意到：既然瀏覽器送出資料，可能會拿到各種不同格式的資訊，那瀏覽器又是怎麼知道資料是什麼格式的呢？用「副檔名」嗎？&lt;br&gt;
其實 HTTP 的 request/response 並不單純只是資料，而是還有一些 metadata 的，也就是 http 的 header (跟 html 的 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 不一樣噢！)。其實應該要用範例講比較清楚&amp;hellip;可是我現在懶得貼範例 (攤)。&lt;br&gt;
先來解釋 HTTP request header：關於 request 的 metadata 無非就是要取得什麼資料，主機名稱為何，接受什麼格式、編碼、語言的回應，還有接不接受回傳資料先壓縮過之類的。另外，如果有給 payload (最常見就是 POST 的時候)，那還會有個欄位用來描述 payload 的長度 (byte 數)。&lt;br&gt;
至於 response header，首先最重要的就是狀態碼。有在上網的人大概比較常聽到「404 Not Found」吧，那個 404 其實就是狀態碼。除此之外常見的還有像是「200 OK」、「302 Found」、「500 Internal Server Error」、「403 Forbidden」 、「400 Bad Request」之類的&amp;hellip;反正很多啦XD 簡單分類：2xx 表示請求成功，3xx 表示重新導向、4xx 表示 (server 認為) client 端有錯誤，5xx 表示 server 自己有錯誤。除了狀態碼以外，header 剩下的部分差不多就是回應 request 裡面的要求了，比方說 Content-Type、Content-Encoding 之類的，還有壓縮與否之類的資訊。&lt;br&gt;
對 http request/response 有興趣的話，只要打開瀏覽器的開發者工具 (Chrome, Firefox, Safari, IE 都有內建)，選擇觀看網路流量，就可以看到 request/response 的內容了。&lt;/p&gt;
&lt;h1 id=&#34;結語&#34;&gt;結語&lt;/h1&gt;
&lt;p&gt;其實寫了這麼亂一篇，還是覺得不夠全面，畢竟一開始我提出來的問題就是個開放式的問題&amp;hellip;回頭看看這篇文章，發現如果是另一個人來看我的文章，也會抓出我對於哪些方面的技術接觸較多，哪些比較少，還有哪些地方其實我一竅不通XD&lt;br&gt;
期許這篇文章可以對一些朋友有點幫助，也希望各路高手如果抓到什麼問題，或是覺得哪邊值得討論，都可以提出來。雖然我很懶 (XD 要不是搭車沒有網路用，我可能一輩子不會把這篇文章寫出來)，但我還是會儘量把上面寫的東西修得更完整的啦&amp;hellip;.&lt;/p&gt;
- https://blog.crboy.net/posts/http-how-it-works/ - 本 blog 文章除另有註明外，皆以 CC BY-SA 4.0 國際版授權條款釋出</description>
        </item>
    
    
    
        <item>
        <title>Evernote Web Clipper &#43; NoScript 在 Firefox 上的擷取問題</title>
        <link>https://blog.crboy.net/posts/evernote-web-clipper-noscript/</link>
        <pubDate>Thu, 10 Oct 2013 00:00:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/evernote-web-clipper-noscript/</guid>
        <description>CrBoy&#39;s Blog https://blog.crboy.net/posts/evernote-web-clipper-noscript/ -&lt;p&gt;這篇是個很短的筆記&amp;hellip;.&lt;/p&gt;
&lt;p&gt;簡單說，Evernote Web Clipper 在安裝了 NoScript 的 Firefox 上擷取的時候會有一點小小的問題&amp;hellip;原因是 NoScript 把 evernote 外掛做的事情當成 XSS 了。解決方式很簡單，根據&lt;a href=&#34;http://discussion.evernote.com/topic/12304-noscript-and-evernote/&#34;&gt;這篇討論&lt;/a&gt;所說的，只要在 NoScript 的 XSS 白名單中加入下面這行就可以了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^https://www.evernote.com/noteit.action(.+)?
&lt;/code&gt;&lt;/pre&gt;
- https://blog.crboy.net/posts/evernote-web-clipper-noscript/ - 本 blog 文章除另有註明外，皆以 CC BY-SA 4.0 國際版授權條款釋出</description>
        </item>
    
    
    
        <item>
        <title>好用的 Mockup / Wireframe 工具：Balsamiq Mockups</title>
        <link>https://blog.crboy.net/posts/balsamiq-mockups/</link>
        <pubDate>Fri, 27 Sep 2013 02:21:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/balsamiq-mockups/</guid>
        <description>CrBoy&#39;s Blog https://blog.crboy.net/posts/balsamiq-mockups/ -&lt;p&gt;對於一個美術白癡來說，要設計一個網站的外觀，實在有點困難。有時候要把心中構想先畫出來給人看，都覺得力不從心，所以只好直接寫一個網頁出來，調 CSS 調老半天，只為了把心中的畫面呈現給人「看看再說」。上面所說的作法，做出來的東西比較類似於 prototype，也就是已經包含了部分 CSS/JavaScript 的完整網頁，也許缺的只是真正會 work 的功能還有各種比較細節的調整而已。但萬一這樣做出來的東西不合人家(也許是主管、客戶，甚至是自己)的胃口，那花的這些時間就算沒有全部白費，也浪費掉不少了。&lt;/p&gt;
&lt;p&gt;或許有人會說，「我寫 prototype 超快我超強！」但你再強你有人家設計師用 photoshop 隨便畫畫強嗎？雖然人家畫出來的就是一張圖，不會動也不能點，但是省時省力，又能把想表現的重點突顯出來，用來作為前期的討論跟比較相當適合！可能講成這樣還是有人鐵齒&amp;hellip;那試想一個狀況：客戶看了你的 prototype 之後，跟你講了一堆元件說要換位置，下面這個按鈕移到上面去(立刻修改HTML)，這個選單要大一點(趕快調整 font-size, width, height，啊破版了再改一下另外那個&amp;hellip;)，這些東西的間距要小一點，整個寬度要一樣(調 margin 調老半天)&amp;hellip;..總而言之，對於外觀的要求，在圖片上討論常常比在程式碼中討論來得容易，所以也才有所謂的 wireframe 與 mockup 的出現。&lt;/p&gt;
&lt;p&gt;這邊不深究 wireframe 與 mockup 兩者的差別，下面通通用 mockup 來表示。Mockup 是一種用來呈現成品大致外觀的工具，他不能拿來使用，但是可以讓人容易想像成品的呈現方式 (人類果然是視覺的動物&amp;hellip;)。以前看過一些人是用 photoshop 之類的影像處理軟體在畫 mockup，之後才去作切版套版&amp;hellip;但對於一個美術白癡而言實在太困難了，小弟實在是 photoshop 苦手orz。好在有人推薦了這套工具：&lt;a href=&#34;http://balsamiq.com/products/mockups/&#34;&gt;Balsamiq Mockups&lt;/a&gt;，他是一個很好用的畫 mockup 工具，內建數十種常用元件，可以用來設計網站、視窗程式或是手機介面。下面就直接來介紹一下。&lt;/p&gt;
&lt;p&gt;下載跟安裝都很簡單，不多說了，Google 一下或是點上面的連結就可以下載&amp;hellip;.我是在 Mac 上安裝的，但他也有 Windows 跟 Linux 版，甚至還有 Google Drive 的 plugin （！）&lt;/p&gt;
&lt;p&gt;這是開啟後的畫面，可以看到左下角指出我只有 7 天的試用期，購買的話則是美金 $79，其實對我來說有點貴XD 但如果是工作所需的話，其實這個價倒不會有什麼問題&amp;hellip;&lt;br&gt;
&lt;img src=&#34;1.png&#34; alt=&#34;7天試用&#34;&gt;&lt;/p&gt;
&lt;p&gt;只要花幾分鐘，從上面拉一些元件下來，打幾個字(不打也沒關係，他都有預設的文字)，就可以快速「畫」出一個網站&amp;hellip;我實在很喜歡這個 browser window，讓我畫出來的東西突然加了20分&amp;hellip;.XD&lt;br&gt;
&lt;img src=&#34;2.png&#34; alt=&#34;使用常見元件快速畫出網站外觀&#34;&gt;&lt;/p&gt;
&lt;p&gt;覺得中間的框框實在不太好看&amp;hellip;所以就塞了點假文章進去。(我用了一個&lt;a href=&#34;http://www.blindtextgenerator.com/&#34;&gt;英文的假文產生器&lt;/a&gt;，如果想寫中文的可以參考看看&lt;a href=&#34;http://more.handlino.com/&#34;&gt;和多的中文假文產生器&lt;/a&gt;) 嗯&amp;hellip;.看起來還算有模有樣呢~&lt;br&gt;
&lt;img src=&#34;3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;裡面的元件實在太多了，每次都要用選的很麻煩，如果知道大概名字的話，可以透過左上角的 Quick Add 直接搜尋加入&lt;br&gt;
&lt;img src=&#34;4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;元件中文字的設定也很簡單，常常都是簡單打個字他就會幫你做出想要的東西了，前提當然是元件要用對&amp;hellip;每個元件預設都有範例可以依循，所以不用擔心不會打，基本的用法都已經在範例中了！&lt;br&gt;
&lt;img src=&#34;5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;每個元件也都有相關的一些外觀設定可以用，可以隨意玩玩&lt;br&gt;
&lt;img src=&#34;6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;例如這個圖片元件(Image)，預設是一個 placeholder 的角色，但也可以讓你放入真正的圖片在你的 mockup 中&lt;br&gt;
&lt;img src=&#34;7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;還可以剪裁圖片成你要的樣子&lt;br&gt;
&lt;img src=&#34;8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;放在畫面中大概就長這樣&amp;hellip;&amp;hellip;&amp;hellip;XD&lt;br&gt;
&lt;img src=&#34;9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外 Balsamiq Mockups 也提供 iPhone 的框框，最有趣的是還有 iPhone 4 跟 iPhone 5 可以選XDDDD，當然也有不同方向提供你作設計。&lt;br&gt;
&lt;img src=&#34;10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;既然有手機元件可以玩，那就自以為很潮的來作個手機版網頁&amp;hellip;把旁邊的主要元素複製一份移到手機框框裡面，調整大小之後，就完成了基本的元素！其實就像 RWD 一樣，都是一樣的元素，只是套用了不同 CSS 一樣&amp;hellip;然後接著在右上角加個會跳出選單的小 icon，噢，Balsamiq Mockups 提供的 icon 還滿多的，還不賴！&lt;br&gt;
&lt;img src=&#34;11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;於是乎&amp;hellip;.就完成了一個看起來好像有模有樣的「網站雛形」。如果要拿來做文件，或是提供給一般人看，其實這樣就可以假裝很威了，哈哈！這些東西做起來花不到 20 分鐘呢~其中還包含慢慢瀏覽有哪些元件可以用的時間。如果用 photoshop 來畫，以我的能力可能要花一整個早上吧&amp;hellip;.@@&lt;br&gt;
&lt;img src=&#34;12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;p&gt;再來是關於中文的問題，以前的版本會無法顯示中文，所以上面的 demo 才會全部都用英文來當範例，結果沒想到，現在的版本已經把中文的問題解決了XD 所以不需要「Use System Font」才能使用中文囉！雖然這字體實在不像英文版這麼可愛&amp;hellip;.但至少能用啦XD&lt;br&gt;
&lt;img src=&#34;13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;最後，總不能畫完東西只給自己看吧XD Balsamiq Mockups 提供 export 的功能，可以輸出成 PNG 圖檔或是 PDF 檔，當然也可以放進系統剪貼簿或是直接列印出來。&lt;br&gt;
&lt;img src=&#34;14.png&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;p&gt;這樣的工具也許有些人(可能是專業設計師或 photoshop 強者)認為沒什麼，但每樣工具都有他不同的目標。Balsamiq Mockups 並沒有辦法用來作各種不同的繪圖，但是他專注於繪製 mockup 這件事上，所以可以讓這件事變得很簡單，門檻很低，特別是對小弟這種美術白癡來說相當受用！不管是網站設計公司、SOHO或是要設計教材之類的用途，都相當實用。推薦~ :P&lt;/p&gt;
- https://blog.crboy.net/posts/balsamiq-mockups/ - 本 blog 文章除另有註明外，皆以 CC BY-SA 4.0 國際版授權條款釋出</description>
        </item>
    
    
  </channel>
</rss> 