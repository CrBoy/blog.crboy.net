<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CrBoy&#39;s blog</title>
    <link>https://blog.crboy.net/</link>
    <description>Recent content on CrBoy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Thu, 29 Sep 2016 03:01:12 +0000</lastBuildDate>
    
        <atom:link href="https://blog.crboy.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Vim: CamelCase to snake_case</title>
        <link>https://blog.crboy.net/posts/vim-camelcase-to-snakecase/</link>
        <pubDate>Tue, 03 Jul 2012 11:05:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/vim-camelcase-to-snakecase/</guid>
        <description>CrBoy&#39;s blog https://blog.crboy.net/posts/vim-camelcase-to-snakecase/ -&lt;p&gt;這篇文章：&lt;a href=&#34;http://fcamel-life.blogspot.tw/2010/03/vim-camel-case-underscore-based.html&#34;&gt;用 vim 將 camel case 改成 underscore-based&lt;/a&gt; 提到用 vim 取代把 CamelCase 轉換成 snake_case 的作法，看到後有一點點小想法，特別紀錄一下 :P&lt;/p&gt;
&lt;p&gt;作者提到的取代方式是：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:%s/\(\l\)\(\u\)/\1_\l\2/gc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但配合 very magic 可以變成這樣&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:%s/\v(\l)(\u)/\1_\l\2/gc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;短了一點點不是重點，重點是括號好看多了XD&lt;/p&gt;
&lt;p&gt;另外作者稍微寫錯的部分是，&lt;code&gt;\l&lt;/code&gt; 跟 &lt;code&gt;\u&lt;/code&gt; 在 substitute pattern 中表示的是小寫和大寫字元，而不是把下一個字變成大(小)寫，那是在後面做的事。可以 &lt;code&gt;:help /character-classes&lt;/code&gt; 看到詳細的列表 (大心)。&lt;/p&gt;
&lt;p&gt;既然這篇文章這麼短，那就提一下好了。今天找資料的時候不小心發現這位作者的 blog，實在看得我欲罷不能啊XD 而且他玩的東西好多，也玩系統、也寫程式，從 C 寫到 PHP、Python、Perl、Ruby&amp;hellip;..太強了orz 還有很多有趣的東西，實在很好玩&amp;hellip;.太佩服 &amp;lt;(_ _)&amp;gt; 建議熱愛技術的人可以參考看看，我覺得很精采 :D&lt;/p&gt;
- https://blog.crboy.net/posts/vim-camelcase-to-snakecase/ - </description>
        </item>
    
    
    
        <item>
        <title>導讀：保持小而頻繁的 commit</title>
        <link>https://blog.crboy.net/posts/small-frequent-commit/</link>
        <pubDate>Tue, 03 Jul 2012 10:35:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/small-frequent-commit/</guid>
        <description>CrBoy&#39;s blog https://blog.crboy.net/posts/small-frequent-commit/ -&lt;p&gt;今天讀到這篇文章 &lt;a href=&#34;http://fcamel-life.blogspot.tw/2010/08/commit.html&#34;&gt;保持小而頻繁的 commit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章在講使用分散式版本控制系統 (DVCS) 時應該儘量保持小而頻繁的 commit 行為，我覺得值得一讀。&lt;/p&gt;
&lt;p&gt;雖然作者使用的是 mercurial (hg)，但其實跟 git 的觀念是很像的。&lt;/p&gt;
&lt;p&gt;以下簡單導讀：&lt;br&gt;
第一部分介紹這個做法的好處，像是可以很容易做 code review (就算是自己 review 自己的 code 也一樣容易)、容易知道現在做了那些修改 (使用 git diff 一目了然)。他還提到用二元搜尋法找到出錯的程式，可透過 git bisect 完成。而他有用到的 hg shelve 跟 hg revert 在 git 也都有對應的功能 (git stash 跟 git revert)，前者是用來把目前 working copy 的修改「暫存」起來 (非 commit)，之後可以再取出來繼續把它改完，後者則是可以還原特定 commit 的變更。也就是說，配合 revert，如果每個 commit 都很小的話，可以很輕鬆把特定修改還原。&lt;/p&gt;
&lt;p&gt;第二部分講 DVCS 的好處，很重要的就是每個人可以自己搞自己的，又可以知道別人的脈絡。如果是在一人專案的狀況下，最基本上也可以省去跟遠端主機溝通的成本。但 DVCS 也有缺點，就是對於無法 merge (或根本不須 merge) 的檔案無法很好的處理。&lt;/p&gt;
&lt;p&gt;後面部分，關於暫存的部分上面提過了，主要就是 git stash。而 hunk selection 在 git 中可用 git add -p 或是 git add -i (interactive) 做到，如果不小心一次寫了太多功能，可以利用這種方式分別 commit，才能保持 commit 小而頻繁，以獲得好處。&lt;/p&gt;
&lt;p&gt;最後一個部分，列了幾個常見的無趣但重要的工作，偏重構方面的。作者建議把這些工作各自獨立成單一的 commit，而事實上這樣真的有很大的好處，看 log 跟 diff 的時候可以少花很多心思。&lt;/p&gt;
- https://blog.crboy.net/posts/small-frequent-commit/ - </description>
        </item>
    
    
    
        <item>
        <title>Xdebug 遠端除錯 (Remote Debugging)</title>
        <link>https://blog.crboy.net/posts/xdebug-remote-debugging/</link>
        <pubDate>Sat, 30 Jun 2012 01:05:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/xdebug-remote-debugging/</guid>
        <description>CrBoy&#39;s blog https://blog.crboy.net/posts/xdebug-remote-debugging/ -&lt;h1 id=&#34;簡介&#34;&gt;簡介&lt;/h1&gt;
&lt;p&gt;PHP 的除錯利器 - Xdebug 也可以進行互動式的除錯。什麼是互動式的除錯呢？當程式在執行中的時候，如果可以把程式的執行控制權攔截下來，那麼就可以根據自己的需求，&lt;strong&gt;單步執行&lt;/strong&gt;我們的程式，並且可以監控程式的狀態。這些狀態包含了像是：目前執行到哪一行程式、目前所有的變數與其值、function 的 call stack (註) 等等。除了看到狀態以外，一個完善的 debugger 還允許開發者動態對變數進行修改，或是動態改變執行流程。&lt;/p&gt;
&lt;p&gt;註：Call stack 指的是 function 呼叫的順序，如 A 呼叫 B，B 呼叫 C，則 call stack 的長相就像是把 B &lt;strong&gt;疊&lt;/strong&gt;到 A 上，再把 C &lt;strong&gt;疊&lt;/strong&gt;到 B 上，當 C 執行完畢後，就把 C 從 stack 中取走，如果接下來 B 又呼叫了 D，那麼就把 D &lt;strong&gt;疊&lt;/strong&gt;上來。所以在任何時候查看 call stack 都可以知道 function 間呼叫的從屬關係。關於 stack 與 call stack 的更多資訊都可以在網路上查到更清楚的解釋，這邊就不獻醜。&lt;/p&gt;
&lt;p&gt;那麼要怎麼利用 Xdebug 進行互動式的除錯呢？由於很多 PHP 程式都是設計用來產生網頁的，所以常常會掛在 web server 底下執行，而非由我們手動去跑程式。Xdebug 身為一個 PHP module，他可以對執行流程進行監控，還可以藉由另外的通道跟開發者進行通訊，也就是說，開發者可以透過 Xdebug 對執行中的 PHP 進行控制。&lt;/p&gt;
&lt;h1 id=&#34;實作&#34;&gt;實作&lt;/h1&gt;
&lt;p&gt;在 &lt;a href=&#34;http://xdebug.org/docs/&#34;&gt;Xdebug 的官方文件&lt;/a&gt;中有很詳細的說明，只可惜是英文的 (笑)。底下只介紹關於遠端除錯的部分，但其他部分也相當實用！&lt;/p&gt;
&lt;h2 id=&#34;觀念&#34;&gt;觀念&lt;/h2&gt;
&lt;p&gt;先介紹觀念跟原理的部分，如果有哪邊寫錯，請多指教。當 PHP 程式開始執行且啟動 debug session 的時候，Xdebug 會根據設定值，主動連線到特定的 IP 的特定 port，以預設值為例，他會嘗試連線到 localhost 的 TCP port 9000，連線成功的話，他會送一個 init message (XML 格式) 出去。這邊在 listen port 9000 的程式我把它稱為 debug client，而 Xdebug 與這個 debug client 間的通訊遵守 &lt;strong&gt;DBGp&lt;/strong&gt; 這個 protocol。連線成功後，Xdebug 就會聽從 debug client 的差遣，進行後續的除錯。&lt;/p&gt;
&lt;p&gt;ps. 萬一連線失敗，程式就自己跑自己的。&lt;/p&gt;
&lt;p&gt;舉個例子，我們去銀行辦理業務的時候，會將我們的一些相關資料交給櫃台行員，請他幫我們辦理。最後業務辦好後，行員會將結果 (例如鈔票、收據) 交給你。在這個例子中，銀行就相當於伺服器，我們交給行員的資料就是 http request (包含 header、post data 等等)，行員的處理方式就是網頁程式的邏輯，最後產生的結果，就是 http response。而今天如果剛好銀行是我們自己開的，我們可以安排一位稽核員進去，並告訴稽核員我們的電話號碼，當有人辦理業務的時候，稽核員有權力叫行員暫停動作，並指揮行員做指定的動作。這時候稽核員會打電話給我們，並詢問我們要怎麼做，這時候你可以一步步看到行員的動作，也可以看到行員處理中的所有資料，甚至可以修改那些資料。這位稽核員就是我們裝在伺服器上的 Xdebug，只要預先設定好我們要使用的 IP 跟 port (相當於電話號碼)，稽核員就會在行員接到業務的時候打電話過來。從這個例子也可以發現，使用者 (辦理業務的人) 跟開發者 (接電話的人) 可以是不同人，也就是說技術上你可以透過 Xdebug 去動態修改別人的操作，然而這種狀況不太常見就是了。&lt;/p&gt;
&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;
&lt;p&gt;接著是設定的部分，設定可以分為 server 端與 client 端。&lt;/p&gt;
&lt;h3 id=&#34;server-端&#34;&gt;Server 端&lt;/h3&gt;
&lt;p&gt;首先這邊假設 Xdebug 已經正確在 web server 上安裝完成了。如果沒有安裝的話&amp;hellip;呃&amp;hellip;請洽詢您的系統管理員。關於 remote debugging 的部分，有幾個主要設定要寫，你可以選擇寫在 &lt;code&gt;php.ini&lt;/code&gt; 中、寫在 &lt;code&gt;httpd.conf&lt;/code&gt; (或類似檔案)中、或是寫在 &lt;code&gt;.htaccess&lt;/code&gt; 中 (不清楚 &lt;code&gt;httpd.conf&lt;/code&gt; 或 &lt;code&gt;.htaccess&lt;/code&gt; 的話請查詢 apache 說明文件)。下面將分別舉例，在這個例子中，我們假設我們所使用的 PC (而非 web server) 的 IP 為 1.2.3.4，debug client 所使用的 port 為 9000 (預設值)。&lt;/p&gt;
&lt;p&gt;寫在 &lt;code&gt;php.ini&lt;/code&gt; 中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xdebug.remote_enable = onxdebug.remote_host = 1.2.3.4xdebug.remote_port = 9000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;寫在 &lt;code&gt;httpd.conf&lt;/code&gt; 或 &lt;code&gt;.htaccess&lt;/code&gt; 中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php_value xdebug.remote_enable onphp_value xdebug.remote_host &amp;quot;1.2.3.4&amp;quot;php_value xdebug.remote_port 9000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果是寫在 &lt;code&gt;httpd.conf&lt;/code&gt; 中，可以把設定包在 virtual host 或 directory 中，就可以只對特定 vhost 或 directory 生效。(關於這個部分我沒有實際寫過，太懶了，如果真的無法設定請告訴我，謝謝)&lt;/p&gt;
&lt;p&gt;其他相關的設定，都可以查閱 &lt;a href=&#34;http://xdebug.org/docs/&#34;&gt;Xdebug 官方文件&lt;/a&gt;。我發現難得有我不用看其他教學，光看原文文件就可以搞起來的東西，想必他的文件應該是滿好懂的&amp;hellip;XD&lt;/p&gt;
&lt;h3 id=&#34;client-端&#34;&gt;Client 端&lt;/h3&gt;
&lt;p&gt;DBGp 有很多 client 可使用，&lt;a href=&#34;http://xdebug.org/docs/&#34;&gt;Xdebug 官方文件&lt;/a&gt;中也有列出很多，但我實在不喜歡太龐大的東西，所以我只嘗試了：Vim plugin、XDebugClient (XDC) 還有 Notepad++ plugin。如果不是我太笨不會操作的話，就是 XDC 的功能太陽春，除了單步執行、查看變數與 call stack 以外，我不知道他還可以幹嘛&amp;hellip;我需要修改變數值啊啊啊啊~~~ 而且更重要的是，不曉得為什麼他常常出錯&amp;hellip;orz Vim plugin 很不賴，可是他相依 Python，如果是在 windows 底下會比較麻煩一點，這個有空再另外說。下面就以比較大眾化的 Notepad++ 舉例好了。&lt;/p&gt;
&lt;p&gt;Xdebug 的文件中提供的連結 (&lt;a href=&#34;http://sourceforge.net/project/showfiles.php?group_id=189927&amp;amp;package_id=236520&#34;&gt;http://sourceforge.net/project/showfiles.php?group_id=189927&amp;amp;package_id=236520&lt;/a&gt;) 是錯誤的，他會轉向到&lt;a href=&#34;http://sourceforge.net/projects/npp-plugins/files/OldFiles/&#34;&gt;這個網址&lt;/a&gt;。觀察網址跟網頁內容，很明顯這不是我們要的= =，我們很聰明的切到「Parent folder」，發現裡面有「DBGP Plugin」(事實證明，了解細節也是很重要的)，我們將他的最新版 (現在是 v0.12 beta，已經 beta 好久了&amp;hellip;) 下載回來，當然是抓編譯好的 dll 檔，如果懶得找，可以直接從&lt;a href=&#34;http://sourceforge.net/projects/npp-plugins/files/DBGP%20Plugin/DBGP%20Plugin%20v0.12%20beta/DBGpPlugin_0_12b_dll.zip/download&#34;&gt;這個連結&lt;/a&gt;抓。&lt;/p&gt;
&lt;p&gt;抓回來後，只要解壓縮，並在 Notepad++ 中選擇「自訂-匯入-匯入外掛模組」(英文版是「Settings - Import - Import Plugin(s)」)，並選擇 dll 來安裝即可，安裝後檔案就可以刪除了，N++ 自己會複製一份。&lt;/p&gt;
&lt;p&gt;為了讓使用更順利，我們要做一些設定，這些設定其實是經過很多次的撞牆得來的，珍貴。首先打開 DBGp 的 config，把「Bypass all mapping」取消，然後把下面這幾項打勾：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Refresh local context on every step&lt;/li&gt;
&lt;li&gt;Refresh global context on every step&lt;/li&gt;
&lt;li&gt;Use SOURCE command for all files and bypass maps (重要!)&lt;/li&gt;
&lt;li&gt;Break at first line when debugging starts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然後打開「自訂-使用者自訂-其他」勾選「自動更新檔案」(不勾你就被煩死XD)，英文版是「Settings - Preferences - MISC.」-&amp;gt;「Update silently」，設定畫面如下圖所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://&#34; alt=&#34;N++ DBGp plugin config（圖不見了，找不回來）&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://&#34; alt=&#34;N++ silent update（圖不見了，找不回來）&#34;&gt;&lt;/p&gt;
&lt;p&gt;設定完成後，就可以打開手機&amp;hellip;呃不對，打開 debug client，畫面如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://&#34; alt=&#34;N++ DBGp plugin（圖不見了，找不回來）&#34;&gt;&lt;/p&gt;
&lt;p&gt;這時候你的電腦就已經在 listen TCP port 9000 了，注意 windows 防火牆可能會跳出訊息問你是否要允許 Notepad++ 通過，記得放行~注意到圖中有個「Turn OFF」的按鈕，如果暫時不想要 debug 的話，可以快速的關掉，直到需要 debug 的時候再打開唷！&lt;/p&gt;
&lt;h2 id=&#34;除錯&#34;&gt;除錯&lt;/h2&gt;
&lt;p&gt;開啟瀏覽器，連上你的網頁，接著我們會在 debug client 端這邊收到&amp;hellip;.等等！為什麼什麼都沒收到？難道設定有問題嗎？&lt;/p&gt;
&lt;p&gt;好&amp;hellip;這個問題我已經忘記好幾次了，所以千萬要特別注意。預設情況下，即使 &lt;strong&gt;enable&lt;/strong&gt; 了 remote debugging，還是不會啟動遠端除錯的功能的，不是他搞笑，而是他要你在你要 &lt;strong&gt;start&lt;/strong&gt; 的時候要跟他說。最簡單的方式是在存取網頁時加上 &lt;code&gt;XDEBUG_SESSION_START=&amp;lt;session_name&amp;gt;&lt;/code&gt; 這個參數，下面是範例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://example.com/my_awesome_program_with_bugs.php?XDEBUG_SESSION_START=npp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這個動作會讓 Xdebug 幫你新增一個 cookie 名為 XDEBUG_SESSION，內容就是你的 session name，往後只要連這個網站，他偵測到你的 cookie，Xdebug 就會開始 remote debugging，也就不用每次輸入了。要停止只要用同樣的方式加上 &lt;code&gt;XDEBUG_SESSION_STOP&lt;/code&gt; 或是刪掉 cookie 即可。&lt;/p&gt;
&lt;p&gt;如果想要偷懶，可以安裝 browser plugin，它會自動幫你送這些資料。或是更懶惰的，直接在 server 端設定 &lt;code&gt;xdebug.remote_autostart = on&lt;/code&gt; 也是一個做法。&lt;/p&gt;
&lt;p&gt;現在真的可以連線了！連上去後，你的 debug client 就會收到 server 端的 source code 還有執行狀態了。可以利用左下方的幾個功能進行追蹤。Step in 是追進函式執行，step over 是直接執行完現在這行，step out 是把現在所在的 context (function 或檔案) 執行完往回 return，run to cursor 應該不用特別解釋了&amp;hellip;&lt;/p&gt;
&lt;p&gt;Run 通常跟中斷點 (breakpoint) 配合，先在後面設定中斷點，然後 run 下去，程式就會在執行到中斷點該行的時候暫停 (該行尚未執行)。或是 debug 完畢要讓程式好好跑完，那就不下中斷點讓他自己跑完這樣。&lt;/p&gt;
&lt;p&gt;後面有個很重要的功能，eval。這個功能可以讓你自己動態寫程式，什麼意思呢？就像隨時可以執行 &lt;code&gt;eval()&lt;/code&gt; 函數一樣，可以印出任意變數或運算式，還可以動態賦值 (重要!)。&lt;/p&gt;
&lt;p&gt;下面有張截圖可以欣賞一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://&#34; alt=&#34;N++ DBGp debug（圖不見了，找不回來）&#34;&gt;&lt;/p&gt;
&lt;p&gt;ps. 當然你也可以用 netcat (nc) 來當 client 啦&amp;hellip;但是他的 protocol 都送 XML，可能會送到死就是了XDDD 但我用它來測試連線是不是正常建立的時候很有用！有空再寫來聊聊~&lt;/p&gt;
&lt;h1 id=&#34;結論&#34;&gt;結論&lt;/h1&gt;
&lt;p&gt;其實相對於 GDB (C/C++ 語言在用的 debugger) 來說，Xdebug 真的是滿陽春的&amp;hellip;(默) 也許問題不是出在 Xdebug 身上，而是 client 端的實作問題，因為像是 watch point、command (當 hit breakpoint 時自動執行動作) 等等很實用的功能，應該都能在 client 端完成，但目前都還沒看到，也許其他的實作版本可以找到？但聊勝於無，這樣 debug 總比一行行 echo 來得好太多了&amp;hellip;(攤手) 事實證明，由奢入儉難啊&amp;hellip;用過 GDB 後對於 debugger 的要求也變得嚴苛了 orz&lt;/p&gt;
&lt;h1 id=&#34;參考資料&#34;&gt;參考資料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xdebug.org/docs/&#34;&gt;Xdebug 官方文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://blog.crboy.net/posts/xdebug-remote-debugging/ - </description>
        </item>
    
    
    
        <item>
        <title>Gitolite 使用教學</title>
        <link>https://blog.crboy.net/posts/gitolite-usage-tutorial/</link>
        <pubDate>Tue, 26 Jun 2012 00:17:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/gitolite-usage-tutorial/</guid>
        <description>CrBoy&#39;s blog https://blog.crboy.net/posts/gitolite-usage-tutorial/ -&lt;p&gt;首先，要使用 gitolite 一定得先會使用 git。下面就不贅述。&lt;/p&gt;
&lt;h1 id=&#34;初次設定&#34;&gt;初次設定&lt;/h1&gt;
&lt;p&gt;使用 gitolite 有以下兩個前置動作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;建立 ssh keypair&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 Linux 或 Windows 上的 Git Bash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh-keygen -f mykey
Generating public/private rsa key pair.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in mykey.
Your public key has been saved in mykey.pub.
The key fingerprint is:
xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx USER@HOST
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這邊要注意幾個地方，&lt;code&gt;-f&lt;/code&gt; 後面的參數表示檔名，可自行設定，此例中為 mykey。產生後會有兩個檔案，分別是 &lt;code&gt;mykey.pub&lt;/code&gt; 跟 &lt;code&gt;mykey&lt;/code&gt;，&lt;code&gt;mykey.pub&lt;/code&gt; 是 public key (公鑰)，可以提供給你的 gitolite server 管理員，而 &lt;code&gt;mykey&lt;/code&gt; 為 private key (私鑰)，&lt;strong&gt;相當於密碼，不可以洩漏給任何人&lt;/strong&gt;。再來，passphrase 是用來保護 key 的密碼，也要牢記。在認證時，同時擁有 private key 與 passphrase 的人才能通過認證，這才是安全的手法。最後，當 key 產生之後，會印出 key 的 fingerprint (指紋)，是用來核對 public key 正確性用的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 PuTTY (PuTTYGen) &lt;a href=&#34;http://the.earth.li/~sgtatham/putty/latest/x86/puttygen.exe&#34;&gt;下載&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;開啟 PuTTYGen&lt;/li&gt;
&lt;li&gt;點選「Generate」並根據指示隨意移動滑鼠&lt;/li&gt;
&lt;li&gt;修改上方「Key comment」並輸入 passphrase (passphrase 的說明可參考上一點)&lt;/li&gt;
&lt;li&gt;將上方文字區中的 public key (ssh-rsa 開頭的那串內容) 與其下方的 fingerprint 複製並提供給 gitolite 管理員&lt;/li&gt;
&lt;li&gt;點選下方「Save private key」將私鑰儲存如果對於產生過程有什麼疑慮，都可以刪掉剛產生的 keypair，重新產生，沒有不良影響。Keypair 產生後，就可以將 public key 與 fingerprint 提供給管理員新增帳號。為了確保安全，最好跟管理員用另外的管道確認 fingerprint 正確。(例如用網路傳輸 public key，用電話確認 fingerprint)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;設定 ssh host alias (for Linux user, optional)&lt;br&gt;
如果想要簡化後續操作 ssh 時輸入的資訊，可以事先設定好。這邊須填入由 gitolite 管理者提供的 &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; 等資訊：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim ~/.ssh/config
host gitserver  
	user git  
	hostname localhost  
	port 22  
	identityfile ~/.ssh/mykey
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最後面的 identity file 就是 private key，如果不想設定也可以直接把 private key 更名為 &lt;code&gt;id_rsa&lt;/code&gt; 放在 &lt;code&gt;~/.ssh&lt;/code&gt; 下即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;一般使用&#34;&gt;一般使用&lt;/h1&gt;
&lt;h2 id=&#34;申請-repository&#34;&gt;申請 repository&lt;/h2&gt;
&lt;p&gt;申請 repository 只要將想使用的名字告知 gitolite 管理員即可。如果有特殊需求，可以建立規則，自行新增，但使用上須更加小心。&lt;/p&gt;
&lt;h2 id=&#34;指定群組&#34;&gt;指定群組&lt;/h2&gt;
&lt;p&gt;如果有多人為同一個 team 的成員，可設定為群組，方便管理。&lt;/p&gt;
&lt;h2 id=&#34;權限控制-進階&#34;&gt;權限控制 (進階)&lt;/h2&gt;
&lt;p&gt;Gitolite 可以對 repository 中的每個 branch 或 tag 進行詳細的控制，例如 leader 可以讀寫所有 branch，而成員只能讀取 master，以及讀寫自己所屬的 branch 等等。若需要進階的權限控制可以詢問你的 gitolite 管理員。&lt;/p&gt;
&lt;h2 id=&#34;範例&#34;&gt;範例&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;@team = alice bob

repo @all ### 所有 repo
	R = boss ### 老闆都可以看
repo project
	R master$ = crboy @team
	RW+ master$ = crboy
	RW dev$ = crboy @team
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;存取-repository&#34;&gt;存取 repository&lt;/h2&gt;
&lt;p&gt;由 gitolite 建立的 repo link 比較單純，不須加上路徑，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;git_user&amp;gt;@&amp;lt;host_address&amp;gt;:&amp;lt;repo_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上面的例子而言，即為：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git@localhost:project (通常的狀況下不會是 localhost，這部份就要自己變通了)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果有照上面設定 ssh config 的話，可以寫：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gitserver:project
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在這裡我們將 host alias 設定為 &lt;code&gt;gitserver&lt;/code&gt; (按照前面的 ssh config 設定)，冒號後面直接接上 repo 名稱即可。&lt;/p&gt;
&lt;h2 id=&#34;將現有-repo-放到-gitolite-上&#34;&gt;將現有 repo 放到 gitolite 上&lt;/h2&gt;
&lt;p&gt;其實只是把 clone 空 repo 的動作省略，改為直接設定遠端 repo 位置而已&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote add origin ssh://git@localhost:project
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;結語&#34;&gt;結語&lt;/h1&gt;
&lt;p&gt;其實基本上的 gitolite 使用並沒有什麼技巧，只要把 ssh key 準備好並設定一下，能夠順利 clone 回來的話就沒問題了。或也可以把現有 repo push 到 gitolite server 上面的空 repo 去，方式其實都大同小異。如果要學習 gitolite 的管理才比較需要 K 文件之類的。:)&lt;/p&gt;
- https://blog.crboy.net/posts/gitolite-usage-tutorial/ - </description>
        </item>
    
    
    
        <item>
        <title>Gitolite 設定與管理</title>
        <link>https://blog.crboy.net/posts/gitolite-settings-and-managements/</link>
        <pubDate>Thu, 21 Jun 2012 01:57:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/gitolite-settings-and-managements/</guid>
        <description>CrBoy&#39;s blog https://blog.crboy.net/posts/gitolite-settings-and-managements/ -&lt;p&gt;首先，要使用跟管理 gitolite 一定得先會使用 git。下面就不贅述。&lt;/p&gt;
&lt;h1 id=&#34;初次設定&#34;&gt;初次設定&lt;/h1&gt;
&lt;p&gt;對使用者而言，只要設定好 ssh host alias 即可。如果是 gitolite 管理者，還必須將 gitolite-admin 給 clone 下來，才能繼續後面設定的動作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;設定 ssh host alias&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim ~/.ssh/config
host gitolite  
	user git  
	hostname localhost  
	port 22  
	identityfile ~/.ssh/admin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這個設定的重點是指定連線時使用特定的 identity file (private key)，如此才能被 gitolite 認可為管理者 (gitolite 是看你用什麼 key 來決定你的身分)。記得 &lt;code&gt;hostname&lt;/code&gt; 的部分要以自己的狀況更換成正確的主機位址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取得管理 gitolite 的 repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone gitolite:gitolite-admin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這個 repository 紀錄了所有 gitolite 的權限資料，包含所有 user 的 public key 與 repository 的存取權限設定。&lt;code&gt;conf/gitolite.conf&lt;/code&gt; 中記載了所有專案的名稱以及每個 user 對專案的權限。而 &lt;code&gt;keydir&lt;/code&gt; 中即為所有 user 的 keys。對 gitolite 的管理與設定都必須透過這個 repo 進行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;管理與設定-參考資料httpsitaramcgithubcomgitoliteadminhtml&#34;&gt;管理與設定 (&lt;a href=&#34;http://sitaramc.github.com/gitolite/admin.html&#34;&gt;參考資料&lt;/a&gt;)&lt;/h1&gt;
&lt;h2 id=&#34;新增使用者&#34;&gt;新增使用者&lt;/h2&gt;
&lt;p&gt;只要將新使用者的 public key 放入 &lt;code&gt;keydir&lt;/code&gt; 中並 add, commit, push 至 gitolite server 即可，檔名即為使用者的帳號。 假設現在使用者 someone 提供給我們 public key，我們要將他加入 gitolite 的使用者中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cp /PATH/TO/someone.pub keypair/someone.pub
$ git add keypair/someone.pub
$ git commit -m &amp;quot;Add user someone&amp;quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完成以上步驟後，someone 就可以利用他的 private key 來存取 server 上的 repos。如果他嘗試直接使用 ssh 登入時，畫面會列出他有權限存取的 repo，以及相對應的權限等級，並立刻結束連線。(這是 &lt;code&gt;gitolite-shell&lt;/code&gt; 提供的功能) 下面是舉例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh gitolite # 這是我在 ~/.ssh/config 中設定的 host 名稱
PTY allocation request failed on channel 0
hello admin, this is git@CrBoy-VM running gitolite3 v3.01-14-gbc3eb34 on git 1.7.9.5

 R W    gitolite-admin
 R W    testing
Connection to localhost closed.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到那個 admin 就是我們在 gitolite 中的虛擬帳號。再次提醒，gitolite 是根據你使用的 key 決定你的身分，如果你用了別把 key 那就會被認為是別的身分。萬一你用的 key 是不能通過的，那 ssh 會提示輸入密碼。為了安全性考量，可以禁止 git 帳號透過密碼登入。&lt;/p&gt;
&lt;h2 id=&#34;新增專案-repository&#34;&gt;新增專案 repository&lt;/h2&gt;
&lt;p&gt;修改 &lt;code&gt;conf/gitolite.conf&lt;/code&gt; 即可新增或移除專案，並可以設定群組，方便管理。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;repo    gitolite-admin
		RW+ = admin

repo    testing
		RW+ = @all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gitolite 預設了兩個 repo，一個就是我們正在使用的 &lt;code&gt;gitolite-admin&lt;/code&gt;，另一個是 &lt;code&gt;testing&lt;/code&gt;。repo 底下的則是該 repo 的權限設定。以此範例而言，&lt;code&gt;gitolite-admin&lt;/code&gt; 僅有 admin 有權限存取，而 &lt;code&gt;testing&lt;/code&gt; 則是所有人都可以存取。(由於 &lt;code&gt;@&lt;/code&gt; 開頭的表示群組，&lt;code&gt;@all&lt;/code&gt; 應該是 gitolite 預設的群組)&lt;br&gt;
值得注意的是，即使是 gitolite 的管理者，如果他沒有被加入 repo 的話，也是沒有權限存取的。同時也因為設定檔是經由 git 管理，管理者如果想要偷看別人的 repo，也很難完全隱匿 (有 log)。另外，如果管理者把自己的權限給拿掉的話，那就&amp;hellip;..(但是還是可以登入主機去修理的，作法很簡單)&lt;/p&gt;
&lt;h2 id=&#34;指定群組&#34;&gt;指定群組&lt;/h2&gt;
&lt;p&gt;可以透過 @ 來指定群組，群組中也可以包含群組，如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@project1 = alice bob
@project2 = crboy dean
@company = boss @project1 @project2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;repo 也可以組成群組&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@system = proj1 proj2 proj3
repo    @system
		RW+ = boss
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;repo-名稱&#34;&gt;repo 名稱&lt;/h2&gt;
&lt;p&gt;repo 的名稱可能是一個明確的名稱：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;repo some_project
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可能用正規表示法 (regular expression) 表示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;repo team/.+$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;結尾加上 $ 符號是為了確保系統將這個名稱認定為正規表示式，避免誤判。 關於 repo 名稱比較複雜，進階設定方式可參考&lt;a href=&#34;http://sitaramc.github.com/gitolite/wild.html&#34;&gt;這裡&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;權限控制&#34;&gt;權限控制&lt;/h2&gt;
&lt;p&gt;權限控制的語法為 (我用了類似正規表示法的寫法)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;權限&amp;gt; [&amp;lt;引用&amp;gt;]* = [&amp;lt;user&amp;gt;]+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可用的權限有：C, R, RW, RW+, RWC, RW+C, RWD, RW+D, RWCD, RW+CD (這是從 gitolite 給的 vim syntax 裡面挖出來的)，還有一個 -，說明如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R 讀取&lt;/li&gt;
&lt;li&gt;W 寫入或建立新的 refs (branches, tags)&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;刪除或改變 refs (允許 &lt;code&gt;push -f&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;拒絕存取 (可用以明確拒絕使用者存取此 repo，須寫在 R 權限之前)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C 和 D 是比較特別的權限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C (獨立) 僅用於使用正規表示法的 repo，表示可建立符合該正規表示法的 repo 名稱&lt;/li&gt;
&lt;li&gt;C (組合) 僅用於使用正規表示法的 refs，表示可建立符合該正規表示法的 refs 名稱&lt;/li&gt;
&lt;li&gt;D 僅用於使用正規表示法的 refs，表示可刪除符合該正規表示法的 refs 名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整範例&#34;&gt;完整範例&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;@team = alice bob ### user 群組
@system = proj1 proj2 proj3 ### repo 群組

repo @all                       ### 所有 repo
	R = boss                    ### 老闆都可以看
repo @system                    ### 前面定義過的 repos
	RW+ = crboy                 ### CrBoy 都可以讀寫
repo project                    ### 單一 repo
	RW+ master = crboy @team    ### 這些人可以讀寫與強制修改 master branch
	RWCD dev/ = @team           ### team 的人可以在 dev/ 開頭的 branch 底下任意操作
	RW+ release = crboy         ### 只有 CrBoy 可以更改 release branch
repo crboy/.+$                  ### crboy 目錄下的任意 repo
	C = crboy                   ### CrBoy 可以隨意創建
	RW+ = crboy                 ### 當然也可以隨意讀寫 (這行似乎不必要，因為創建的人就可以讀寫)
&lt;/code&gt;&lt;/pre&gt;
- https://blog.crboy.net/posts/gitolite-settings-and-managements/ - </description>
        </item>
    
    
    
        <item>
        <title>Gitolite ver.3 (g3) 安裝筆記</title>
        <link>https://blog.crboy.net/posts/gitolite-3-installation/</link>
        <pubDate>Wed, 20 Jun 2012 01:50:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/gitolite-3-installation/</guid>
        <description>CrBoy&#39;s blog https://blog.crboy.net/posts/gitolite-3-installation/ -&lt;p&gt;Gitolite 是一個持續開發中的 git server 專案，自 2009 年開始後，至今已經發展到第 3 版，作者將其稱之為 g3 (之前的版本分別為 g1 與 g2)。由於 g3 相對於之前的版本，是整個重寫的專案，根據紀錄，g3 是大約今年 4 月才開始的，所以很多文件早已過時，只好慢慢研究作者提供的文件。整個專案都&lt;a href=&#34;https://github.com/sitaramc/gitolite&#34;&gt;放在 github 上&lt;/a&gt;，並且作者也提供了&lt;a href=&#34;http://sitaramc.github.com/gitolite/index.html&#34;&gt;相關文件&lt;/a&gt;，本文就是參考該文件寫成。&lt;br&gt;
我的操作環境是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 12.04&lt;/li&gt;
&lt;li&gt;Git version 1.7.9.5&lt;/li&gt;
&lt;li&gt;Perl 5.14&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文章假設使用者已經具備 git 的基本知識與操作技能，以及基本的 ssh 認知，不再贅述。&lt;/p&gt;
&lt;h1 id=&#34;準備步驟&#34;&gt;準備步驟&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;伺服器上須先預備好以下套件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 1.6.6 以上&lt;/li&gt;
&lt;li&gt;Perl 5.8.8 以上&lt;/li&gt;
&lt;li&gt;OpenSSH&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;產生管理者的 ssh key (此 key 將專門提供給 gitolite 管理者使用)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa -f &amp;lt;key_filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;舉例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa -f ~/admin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;會產生 &lt;code&gt;~/admin&lt;/code&gt; 跟 &lt;code&gt;~/admin.pub&lt;/code&gt; 兩個檔案，分別是 private key 與 public key。&lt;br&gt;
此時會提示輸入 passphrase。passphrase 是用來加密 private key 的密碼，避免 private key 被竊時造成的安全性風險。每次 push/pull 的時候需要輸入 passphrase，可以配合 ssh-add (Linux) 或 Pageant (Windows) 來避免每次都要打 passphrase。&lt;br&gt;
這邊注意所使用的 &lt;code&gt;&amp;lt;key_filename&amp;gt;&lt;/code&gt; 就是 gitolite 管理者 (非主機管理者也非 git 帳號管理者) 所使用的虛擬帳號。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立 git 專用帳號 (我使用 &lt;code&gt;git&lt;/code&gt; 而非有些人慣用的 &lt;code&gt;gitolite&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# adduser --system git --shell &amp;quot;/bin/bash&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;必須給予 git 帳號一個可以執行 command 的 shell，但可放心所有 gitolite user 都只是虛擬帳號，他們會被導向到 gitolite-shell 這個 gitolite 提供的指令去，無法真的登入。&lt;br&gt;
以下未特別註明的，皆會使用 git 帳號作為 $ 的擁有者。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;安裝步驟-未註明--的皆使用-git-帳號&#34;&gt;安裝步驟 (未註明 &lt;code&gt;#&lt;/code&gt; 的皆使用 git 帳號)&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;取得 &lt;code&gt;gitolite&lt;/code&gt; 套件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/sitaramc/gitolite.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安裝 gitolite 於家目錄下 (其實只是做個 soft link 過去)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir -p ~/bin
$ gitolite/install -ln
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;記得把 $HOME/bin 加入 $PATH 中。&lt;br&gt;
或是也可以用複製的方式安裝到其他系統目錄下 (以 /usr/share/gitolite 為例)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkdir -p /usr/share/gitolite
# gitolite/install -to /usr/share/gitolite
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;設置 gitolite&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gitolite setup -pk admin.pub # 這裡的 admin.pub 就是之前產生的管理者公鑰
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這表示 admin.pub 這把公鑰所對應的私鑰擁有者就是 gitolite 的管理者，同時管理者的虛擬帳號即為 admin。 另外，如果 &lt;code&gt;~/.ssh&lt;/code&gt; 底下的 authorized_keys 已經有相同的 public key 的話，會出現 FATAL error：「admin.pub maps to shell access, not admin.」由於 &lt;strong&gt;gitolite 透過使用的 key 來決定使用者是不是管理者&lt;/strong&gt;，故不可以使用本來已可連線取得 shell 的 key。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;安全性&#34;&gt;安全性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;實際使用 gitolite 後，會發現 &lt;code&gt;~git/.ssh/authorized_keys&lt;/code&gt; 這個檔案被加入一些東西，像是這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# gitolite start
command=&amp;quot;/usr/share/gitolite/./gl-auth-command admin&amp;quot;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa &amp;lt;很長一串 public key&amp;gt; &amp;lt;description&amp;gt;
command=&amp;quot;/usr/share/gitolite/./gl-auth-command someone&amp;quot;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa &amp;lt;很長一串 public key&amp;gt; &amp;lt;description&amp;gt;
# gitolite end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;前面加上的那個稱為 &lt;strong&gt;ssh forced command&lt;/strong&gt;，可以限制 user 登入後執行的 command。也就是說，gitolite 在使用時，並沒有啟動 daemon，而是透過 ssh 連線，並轉介到 gl-auth-command 進行動作的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gitolite 在運作時，使用的都是 git 這個帳號 (以我的例子而言)，如果對安全性有很高的要求，可以盡量限縮這個帳號的權限。不過還是得給他一個 shell 使用就是了，我試過將 shell 改成 &lt;code&gt;/bin/false&lt;/code&gt; 或 &lt;code&gt;/usr/sbin/nologin&lt;/code&gt;，結果操作就失敗了orz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;預設狀況下，透過 &lt;code&gt;gl-setup&lt;/code&gt; 產生的 repository 與其他相關檔案，權限都是 700。也就是說，即使主機上有其他的使用者，如果他沒有管理者權限 (或是 &lt;code&gt;sudo&lt;/code&gt; 權限) 的話，也無法存取到那些受 gitolite 管轄的 repository。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管理者在進行設定時，最好確認使用者提供的 key 是否正確，可透過&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh-keygen -lf &amp;lt;pubkey_file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;來獲得 public key 的 fingerprint，並以其他管道與使用者對照確認，避免惡意攻擊。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;總結&#34;&gt;總結&lt;/h1&gt;
&lt;p&gt;整體弄起來，覺得 g3 在管理設定上，還有使用上都跟 g2 沒有什麼差別，只是安裝上不一樣就是了。不過由於是 perl 程式，其實安裝上還滿容易的，一開始不了解架構的話容易撞牆而已。&lt;/p&gt;
- https://blog.crboy.net/posts/gitolite-3-installation/ - </description>
        </item>
    
    
    
        <item>
        <title>Gitolite 2.2 安裝筆記</title>
        <link>https://blog.crboy.net/posts/gitolite-22-installation/</link>
        <pubDate>Mon, 18 Jun 2012 01:50:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/gitolite-22-installation/</guid>
        <description>CrBoy&#39;s blog https://blog.crboy.net/posts/gitolite-22-installation/ -&lt;p&gt;&lt;strong&gt;特別注意&lt;/strong&gt; - 為什麼標題要特別註明是 Gitolite 2.2？因為文章已經寫好之後才發現作者已經大幅更新版本。新版有&lt;a href=&#34;http://sitaramc.github.com/gitolite/index.html&#34;&gt;文件在此&lt;/a&gt;。本文是以 ubuntu 12.04 套件庫中的 gitolite 2.2 作為安裝目標。&lt;br&gt;
Gitolite 是一個持續開發中的 git server 套件，本來還在糾結要玩 gitolite 或是 gitosis，決定兩個都嘗試看看後，發現本來打算先嘗試的 gitosis 很難找到來源，唯一找到的是&lt;a href=&#34;https://github.com/res0nat0r/gitosis&#34;&gt;原作者(吧)在 github 上的 repo&lt;/a&gt;，已經有 3 年沒更新了，於是決定直接嘗試 gitolite。搜尋了一下發現，原來 gitolite 是作者從 gitosis 的想法發展而來，本來是 gitosis + lite，但現在已經發展得比 gitosis 還強大了。而且從 &lt;a href=&#34;https://github.com/sitaramc/gitolite&#34;&gt;gitolite 作者的 github repo&lt;/a&gt; 發現，上次更新是一週前，這表示它現在還是一個活躍且成長中的專案，當然就決定是他了！ (但其實後來才發現上次更新的是第 3 版，第 2 版現在只會修 bug 而已)&lt;br&gt;
我的安裝過程主要是參考 &lt;a href=&#34;http://blog.longwin.com.tw/2011/03/linux-gitolite-git-server-2011/&#34;&gt;Tsung&amp;rsquo;s Blog 的這篇文章&lt;/a&gt;而成，但不曉得原因為何，我這邊碰到的狀況跟作者不太一樣，我想也許是他使用的是 Debian (?) 或者他用 Ubuntu 但是版本跟我不同吧。我還另外參考了&lt;a href=&#34;http://www.ossxp.com/doc/git/gitolite.html&#34;&gt;這篇文章&lt;/a&gt;，裡面寫的東西滿豐富的。同時這裡也附上&lt;a href=&#34;http://sitaramc.github.com/gitolite/g2/master-toc.html&#34;&gt;作者提供的文件&lt;/a&gt;。&lt;br&gt;
我的操作環境是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 12.04&lt;/li&gt;
&lt;li&gt;Git version 1.7.9.5&lt;/li&gt;
&lt;li&gt;Gitolite version: 2.2-1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文章假設使用者已經具備 git 的基本知識與操作技能，不再贅述。另外如果是大部分其他系統的管理者，可能不習慣用 &lt;code&gt;sudo&lt;/code&gt;，那麼就先切換到 root 再去執行動作即可。這邊為了保險起見，還是使用一般帳號進行設定。&lt;/p&gt;
&lt;h2 id=&#34;操作步驟&#34;&gt;操作步驟&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安裝 &lt;code&gt;gitolite&lt;/code&gt; 套件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install gitolite
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此時可能會同時需要你安裝 &lt;code&gt;openssh-server&lt;/code&gt; 跟 &lt;code&gt;ssh-import-id&lt;/code&gt;。另外在這個時候，除了 &lt;code&gt;/usr/share/gitolite&lt;/code&gt; 跟 &lt;code&gt;/usr/share/doc/gitolite&lt;/code&gt; 還有兩個 vim 用的 syntax 跟 indent 檔案以外，系統還沒被裝上任何東西，所以這時候 &lt;code&gt;/etc&lt;/code&gt; 底下沒有設定檔，查詢 &lt;code&gt;/etc/passwd&lt;/code&gt; 也沒有 gitolite 這個帳號&amp;hellip;orz 總而言之，在這裡我們必須自力更生！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;這邊如果不是用 Debian/Ubuntu，或是想要取得最新版本，或是有其他考量的話，可以直接從作者的 repo 抓：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/sitaramc/gitolite.git
$ cd gitolite
$ git checkout g2
$ sudo cp -r src /opt/gitolite &amp;amp;&amp;amp; sudo ln -s /opt/gitolite /usr/share/gitolite
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由於作者已經更新他的 master 為 g3 版本，所以我們必須抓出 g2 branch 再行複製。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立 git 專用帳號 (我使用 &lt;code&gt;git&lt;/code&gt; 而非 &lt;code&gt;gitolite&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo adduser --system git --shell &amp;quot;/bin/bash&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;必須給予 git 帳號一個可以執行 command 的 shell，但可放心所有 gitolite user 都會被導向到 gl-auth-command 這個 gitolite 提供的指令去，無法真的登入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;將 gitolite 安裝至系統目錄&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gl-system-install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中已包含預設路徑，若要修改預設路徑可加上 &lt;code&gt;-h&lt;/code&gt; 參數獲得相關資訊。若以一般使用者權限進行安裝，則會將程式路徑設定在使用者家目錄下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;產生管理者的 ssh key (此 key 將專門提供給 gitolite 管理者使用)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa -f &amp;lt;key_filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;舉例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa -f ~/admin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;會產生 &lt;code&gt;~/admin&lt;/code&gt; 跟 &lt;code&gt;~/admin.pub&lt;/code&gt; 兩個檔案，分別是 private key 與 public key。&lt;br&gt;
建議不輸入 passphrase，這樣每次 push/pull 的時候才不需要輸入 passphrase。但如果相當注重安全性的話當然還是可以輸入的。(當然也可以配合 ssh-add 來避免每次都要打 passphrase)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;設置 gitolite (須使用 git 帳號)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ /usr/share/gitolite/gl-setup /PATH/TO/admin.pub
The default settings in the rc file (/home/git/.gitolite.rc) are fine for most
people but if you wish to make any changes, you can do so now.


hit enter...
creating gitolite-admin...
Initialized empty Git repository in /home/git/repositories/gitolite-admin.git/
creating testing...
Initialized empty Git repository in /home/git/repositories/testing.git/
[master (root-commit) 104e5b2] start
 2 files changed, 6 insertions(+)
 create mode 100644 conf/gitolite.conf
 create mode 100644 keydir/admin.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這表示 admin.pub 這把公鑰所對應的私鑰擁有者就是 gitolite 的管理者，同時管理者的帳號即為 admin。 另外，如果 &lt;code&gt;~/.ssh&lt;/code&gt; 底下的 authorized_keys 已經有相同的 public key 的話，會出現 FATAL error：「admin.pub maps to shell access, not admin.」由於 &lt;strong&gt;gitolite 透過使用的 key 來決定使用者是不是管理者&lt;/strong&gt;，故不可以使用本來已可連線取得 shell 的 key。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安裝完畢！關於管理跟使用的部分將另外撰寫。&lt;/p&gt;
- https://blog.crboy.net/posts/gitolite-22-installation/ - </description>
        </item>
    
    
    
        <item>
        <title>PHP Informix on Linux 安裝與設定</title>
        <link>https://blog.crboy.net/posts/php-informix-on-linux/</link>
        <pubDate>Fri, 15 Jun 2012 06:43:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/php-informix-on-linux/</guid>
        <description>CrBoy&#39;s blog https://blog.crboy.net/posts/php-informix-on-linux/ -&lt;p&gt;環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 12.04 LTS&lt;/li&gt;
&lt;li&gt;Apache 2.2.22&lt;/li&gt;
&lt;li&gt;PHP 5.3.10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果沒有 apache 與 php 環境可由套件庫安裝&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install apache2 php5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;為了編譯模組，需要安裝 &lt;code&gt;php5-dev&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install php5-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;為了取得 PECL 上的原始碼，需要安裝 &lt;code&gt;subversion&lt;/code&gt; (即 SVN)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install subversion
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;安裝-informix-client-sdk&#34;&gt;安裝 Informix Client SDK&lt;/h1&gt;
&lt;p&gt;在&lt;a href=&#34;http://www-01.ibm.com/software/tw/informix/retention/trial.html&#34;&gt;這個連結&lt;/a&gt;可以下載 Informix Developer Edition，有免費的版本，但僅供開發使用且有使用資源上的限制。我抓下來的檔案為 &lt;code&gt;iif.11.70.UC5DE.Linux-RHEL5.tar&lt;/code&gt;。其實根據 [Install Informix on Debian] 這篇文章看來，應該是有單純的 ClientSDK 可以下載，但是我找不到&amp;hellip;&lt;br&gt;
將其解開&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd &amp;amp;&amp;amp; mkdir informix &amp;amp;&amp;amp; cd informix
$ tar -xf /PATH/TO/iif.11.70.UC5DE.Linux-RHEL5.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;建立 informix 帳號與群組&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo addgroup --system informix
$ sudo adduser --system informix --ingroup informix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;開始安裝&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo ./ids_install # 官方文件是要我們加上 `-i gui` 以圖形模式安裝，亦可
#這中間的訊息會出現下面這一行疑似錯誤的訊息，但是不影響後面動作
strings: &#39;/lib/libc.so.6&#39;: No such file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在安裝過程中，多數設定都用預設值，但安裝目錄預設為 &lt;code&gt;/opt/IBM/informix&lt;/code&gt;，我改為 &lt;code&gt;/opt/informix&lt;/code&gt; 了。另外，可以自訂想安裝的模組，由於我不需要自行架設 server，所以這邊我只留下 IBM Informix Client SDK 與 Global Language Support (GLS) 中的 Chinese，其他全都取消了。&lt;br&gt;
最後設定環境變數供後續安裝使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export INFORMIXDIR=/opt/informix
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;安裝-php-informix-模組&#34;&gt;安裝 PHP Informix 模組&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ cd &amp;amp;&amp;amp; mkdir php_informix &amp;amp;&amp;amp; cd php_informix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;取得 php informix 的原始碼&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ svn checkout http://svn.php.net/repository/pecl/informix/trunk/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;進行建置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd trunk
$ phpize --with-php-config=`which php-config`
$ ./configure --with-php-config=`which php-config`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;停！這邊有個問題需要處理&amp;hellip;.在產生出來的 &lt;code&gt;Makefile&lt;/code&gt; 的第 16 行有個這樣的敘述&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INFORMIX_SHARED_LIBADD = -Wl,-rpath,/opt/informix/lib/esql -L/opt/informix/lib/esql -Wl,-rpath,/opt/informix/lib -L/opt/informix/lib -lifsql -lifasf -lifgen -lifos -lifgls -lnetstub -ldl -lcrypt -lifglx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我們必須手動給他加點參數才能讓後續執行動作正常，在後面加上 &lt;code&gt;/opt/IBM/lib/esql/checkapi.o&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INFORMIX_SHARED_LIBADD = -Wl,-rpath,/opt/informix/lib/esql -L/opt/informix/lib/esql -Wl,-rpath,/opt/informix/lib -L/opt/informix/lib -lifsql -lifasf -lifgen -lifos -lifgls -lnetstub -ldl -lcrypt -lifglx /opt/informix/lib/esql/checkapi.o
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;開始編譯與安裝&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make
$ sudo make install
Installing shared extensions:     /usr/lib/php5/20090626+lfs/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每個人的安裝位置可能不同，以我這裡為例，我的安裝位置是在 &lt;code&gt;/usr/lib/php5/20090626+lfs/&lt;/code&gt; (後續設定會用到)。&lt;/p&gt;
&lt;h1 id=&#34;設定&#34;&gt;設定&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;新增&lt;/strong&gt;以下資料至相對應的設定檔中&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# /etc/php5/conf.d/informix.ini
extension=/usr/lib/php5/20090626+lfs/informix.so
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# /opt/informix/etc/sqlhosts (偷參考的設定的 nettype 是用 tli，但我測試需用 soc 才能正常連線)  
&amp;lt;db_server&amp;gt;     &amp;lt;nettype&amp;gt;       &amp;lt;hostname&amp;gt;      &amp;lt;service&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# /etc/hosts
&amp;lt;IP&amp;gt;    &amp;lt;hostname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# /etc/services
&amp;lt;service&amp;gt;   &amp;lt;port_num&amp;gt;/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#/etc/apache2/envvars (聽說在 RedHat 上為 `/etc/sysconfig/httpd`)  
export INFORMIXDIR=/opt/informix
export INFORMIXSERVER=&amp;lt;hostname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有可能需要做 locale 的設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export DB_LOCALE=zh_TW.big5
export CLIENT_LOCALE=zh_TW.big5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重新啟動 apache&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo service apache2 restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;設定完後可在 phpinfo 中看到 Informix 的區段，以及在 Environment 區段可以看到我們設定的環境變數。&lt;/p&gt;
&lt;h1 id=&#34;測試用-script&#34;&gt;測試用 script&lt;/h1&gt;
&lt;p&gt;這個程式僅供參考用，也可以使用本來可執行的程式進行測試。要注意的是如果使用 php command 進行測試的話，要設定環境變數。(如 &lt;code&gt;/etc/apache2/envvars&lt;/code&gt; 中新增的設定)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$db = ifx_connect(&amp;quot;DBNAME@DBSERVER&amp;quot;, &amp;quot;USERNAME&amp;quot;, &amp;quot;PASSWORD&amp;quot;);
var_dump($db);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若可成功連結即表示安裝與設定成功&lt;/p&gt;
&lt;h1 id=&#34;參考連結&#34;&gt;參考連結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[Install Informix on Debian] (Google 搜尋 &amp;ldquo;informix.so&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;[Informix finderr] (直接在 &lt;code&gt;$INFORMIXDIR/msg&lt;/code&gt; 下 &lt;code&gt;grep -R&lt;/code&gt; 亦可)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://serverfault.com/questions/151328/setting-apache2-path-environment-variable&#34; title=&#34;Setting Apache2 PATH environment variable&#34;&gt;Setting Apache2 PATH environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pecl.php.net/package/informix&#34;&gt;PECL 上的 informix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://blog.crboy.net/posts/php-informix-on-linux/ - </description>
        </item>
    
    
    
        <item>
        <title>Xdebug 基礎安裝與使用</title>
        <link>https://blog.crboy.net/posts/xdebug-installation-and-usage/</link>
        <pubDate>Tue, 12 Jun 2012 23:39:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/xdebug-installation-and-usage/</guid>
        <description>CrBoy&#39;s blog https://blog.crboy.net/posts/xdebug-installation-and-usage/ -&lt;h1 id=&#34;環境&#34;&gt;環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 12.04 LTS&lt;/li&gt;
&lt;li&gt;Apache 2.2.22&lt;/li&gt;
&lt;li&gt;PHP 5.3.10&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;安裝&#34;&gt;安裝&lt;/h1&gt;
&lt;p&gt;透過套件庫安裝&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install php5-xdebug
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;設定&#34;&gt;設定&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# /etc/php5/conf.d/xdebug.ini

zend_extension=/usr/lib/php5/20090626+lfs/xdebug.so

xdebug.auto_trace = on  #自動進行 function trace
xdebug.trace_output_dir = /tmp/xdebug   #trace log 的位置
xdebug.collect_params = 3   #設定顯示參數內容

xdebug.profiler_enable = on #啟用 profiler
xdebug.profiler_output_dir = /tmp/xdebug    #profile log 的位置
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;建立記錄檔所需目錄&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir /tmp/xdebug &amp;amp;&amp;amp; chmod 777 /tmp/xdebug
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;使用&#34;&gt;使用&lt;/h1&gt;
&lt;p&gt;每當你執行 php 的時候 (不管是透過 apache 或是用 command line 執行)，會在 &lt;code&gt;/tmp/xdebug&lt;/code&gt; 底下產生 log 檔。&lt;code&gt;trace.*.xt&lt;/code&gt; 是 function trace 的 log，而 &lt;code&gt;cachegrind.out.*&lt;/code&gt; 則是 profiler 的 log。&lt;/p&gt;
&lt;p&gt;trace log 比較容易閱讀，可以直接開起來閱讀。至於 profile log 可以透過一些工具的輔助來進行統計，如 &lt;a href=&#34;http://kcachegrind.sf.net/&#34;&gt;KCacheGrind&lt;/a&gt; (&lt;a href=&#34;http://sourceforge.net/projects/precompiledbin/&#34;&gt;Windows版&lt;/a&gt;)、&lt;a href=&#34;http://sourceforge.net/projects/wincachegrind&#34;&gt;WinCacheGrind&lt;/a&gt;、或是 &lt;a href=&#34;https://github.com/jokkedk/webgrind&#34;&gt;WebGrind&lt;/a&gt; 等等。&lt;/p&gt;
&lt;h1 id=&#34;參考資料&#34;&gt;參考資料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xdebug.org/docs/&#34;&gt;Xdebug 官方文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://blog.crboy.net/posts/xdebug-installation-and-usage/ - </description>
        </item>
    
    
    
        <item>
        <title>明天，我們空中再見</title>
        <link>https://blog.crboy.net/posts/%E6%98%8E%E5%A4%A9%E6%88%91%E5%80%91%E7%A9%BA%E4%B8%AD%E5%86%8D%E8%A6%8B/</link>
        <pubDate>Sat, 09 Jun 2012 11:19:00 +0000</pubDate>
        
        <guid>https://blog.crboy.net/posts/%E6%98%8E%E5%A4%A9%E6%88%91%E5%80%91%E7%A9%BA%E4%B8%AD%E5%86%8D%E8%A6%8B/</guid>
        <description>CrBoy&#39;s blog https://blog.crboy.net/posts/%E6%98%8E%E5%A4%A9%E6%88%91%E5%80%91%E7%A9%BA%E4%B8%AD%E5%86%8D%E8%A6%8B/ -&lt;p&gt;延續上一篇&amp;hellip;嗨，我來看你們了。&lt;/p&gt;
&lt;p&gt;週三看的戲，到了現在才寫文章&amp;hellip;哈，其實今天心情不佳，想說寫寫文章沈澱一下自己。前幾天也許真的壓力太大了吧&amp;hellip;.&lt;/p&gt;
&lt;p&gt;這天我早早下班，直奔成功廳大門，雖然不意外，但是現場竟然已經有 10 個人左右在排隊了&amp;hellip;才 5:15 耶，這群人都是瘋子&amp;hellip;.然後我加入了這群瘋子，開始等XD 到了 6 點多，開始發放「限量月亮版海報」，果然啊&amp;hellip;.第一天發太陽第二天發月亮，真是太奸詐了!!! 讓我很意外的是，竟然發生跟前一天一樣的狀況，延後入場時間。我還以為會碰到的突發狀況前一天都先撞過了&amp;hellip;沒想到&amp;hellip;.看來他們對場地的掌握度還是不足，以後如果還要在成功廳演出的話，要更注意場地問題唷！&lt;/p&gt;
&lt;p&gt;進場後，先是發了呆，後來發現一個很重要的改進，前一天太亮的「緊急出口」標示被遮起來了，變得雖然能夠看到，但光線不會照亮台上。雖然說遮起來這樣好像不太好，但是這是成功廳的問題吧= = 這標示做這麼亮也太詭異&amp;hellip;.@@&lt;/p&gt;
&lt;p&gt;開場後，發現依然有些微黑臉的狀況，不過燈光是由上往下打的，無法避免。也許在前方放置反光板可以幫忙打光？不曉得有沒有人這樣做&amp;hellip;.要不然就要請演員注意頭不能太低了&amp;hellip;.這是舞台方面的東西，我不太懂，我想也許有專業的人知道要怎麼辦吧？&lt;/p&gt;
&lt;p&gt;該來&lt;del&gt;爆雷&lt;/del&gt;談談內容了&amp;hellip;這部戲「明天我們空中再見」把時間軸切的很亂，讓人很難迅速組織起來。每次提到劇名就會想到一件事，這部戲到底干「明天我們空中再見」什麼事啊&amp;hellip;= = 除了開頭跟結尾的廣播內容，還有女主角是個播音員以外&amp;hellip;我實在找不出為什麼要用這個當名稱啊&amp;hellip;果然是藝術&amp;hellip;XD&lt;/p&gt;
&lt;p&gt;簡介一下故事，也順便可以審視一下我對於故事的理解是否正確。一開始的時間是「現在」，女播音員文媛到了 40 樓高的地方，看著風景，突然就失憶了，所以故事回到過去&amp;hellip;..&lt;/p&gt;
&lt;p&gt;三年前，溫柔體貼的成華 (他姓張) 與渴望愛情的嘟嘟相識，並在公園裡&amp;hellip;呃&amp;hellip;聊天的時候，遇到小海與烏龜搶劫，然而不打不相識，經過了這晚，成華與嘟嘟交往，也與小海、烏龜成了好朋友。不久後，他們結婚，並去度蜜月，回來後在家裡辦了 party，身為結婚證人的小海也來參加，並以奇妙的方式認識了嘟嘟的多年好友 - 文媛。幾天後，小海忍不住心中的思念 (我說羅同學你的內心戲實在很豐富XD)，與文媛相約爬山，在山上對文媛講了一個神話。小海說，他是太陽，他太燙了，只要接近他就會乾涸，所以天神懲罰他，要他追著月亮，但他們只在黃昏的時候能夠相見，而且只有這時候的太陽才不燙人&amp;hellip;&amp;hellip;這個神話讓他們相戀，卻也造成一年後的心傷&amp;hellip;&lt;/p&gt;
&lt;p&gt;一年後，是故事最大的轉折點，成華與嘟嘟決定離婚，而文媛與小海約定的一年交往期限也到了，文媛不再理會小海，但小海卻依然無法忘卻。就在某天小海與小妹 (文媛的妹妹) 盼著文媛回來的時候，小海的情緒潰堤，而他們倆發生了關係。在成華的獸醫院裡，嘟嘟 - 文媛所養的狗，嚥下他的最後一口氣，在這裡，小妹、文媛的同事 (男播音員) 還有成華、小海、小女人大吵了一架，這裡是劇情的一大高潮，然而小女人相當帥氣的控制住了小海，免於一場悲劇的發生。&lt;/p&gt;
&lt;p&gt;噢，小女人，他是小海多年的朋友了，像是在交往，卻又放任小海四處拈花惹草，也許小海心中未曾想過他與小女人的關係，但小女人的心中是喜歡著小海的。她甘願為了小海付出，雖然討厭自己的生活，卻還是掙扎著繼續生存。她會算命，她可以看透別人的未來、別人的人生，卻對自己的過去、現在、未來無能為力。不久後，她自殺了。&lt;/p&gt;
&lt;p&gt;而以各種方式尋覓文媛不成的小海，也決心讓自己不再痛苦，引火自焚，但沒死。卻在醫院接受成華的探病時，得知了一個晴天霹靂的消息&amp;hellip;.文媛與成華決定結婚。小海相當痛苦，他還是愛著文媛，但還是不情願的出席了成華與文媛的婚禮。在喜宴上，成華的前妻嘟嘟，已經跟烏龜交往了。嘟嘟倒是相當開放，與成華親密合照，這讓烏龜心理不是滋味。而心裡有疙瘩的小海與烏龜，都鬧著彆扭。&lt;/p&gt;
&lt;p&gt;時間拉回到現在&amp;hellip;在文媛失憶之後，每個人都試圖喚醒文媛的記憶，最激動的就屬小海了，他擔心文媛，擔心他與文媛的過去就這樣消失，一點痕跡也不留下。而被文媛遺忘的嘟嘟與惹文媛生氣的小妹，則試圖用過去的照片喚醒文媛的記憶。但文媛說，知道我過去做了什麼，對我是誰並沒有幫助。而暗戀文媛多年的男播音員，則試圖帶文媛回到錄音室，讓他唸著自己從前寫的稿子。&lt;/p&gt;
&lt;p&gt;最後大家都體會到，時間都回不去了。這個故事沒有結局，只知道小海要出去旅行，重新做人。也許未來會有意想不到的變化。但，有誰的生活是一成不變的呢？&lt;/p&gt;
&lt;p&gt;呼&amp;hellip;終於把故事給講完了。回憶演出，有許多部分讓我相當喜歡。先談談小女人出場那一幕，「嚇你爸！嚇你媽！嚇死你全家喔！」&amp;hellip;.呃好啦，這只是個笑點，可是我覺得很好笑XD 小女人賣的是面具，各式各樣的面具，笑臉、哭臉、三隻眼睛的臉&amp;hellip;我喜歡面具們出場的表演方式，也許這有某個專有名詞吧，但我不懂。我只知道配上音樂，營造出來的氣氛很奇妙，也許我們生活周遭也看著一堆面具，有笑臉、哭臉、三隻眼睛的臉&amp;hellip;這世界不就是這樣嗎？&lt;/p&gt;
&lt;p&gt;另一個也是黑衣隱形人出場的那幕，是小海的自焚。這樣的表演方式很棒，很有氣勢，不曉得是怎麼想到的呢？另外，我注意到其中一位黑衣人，很認真的「跳舞」。雖然我不太懂這個&amp;hellip;但是看得出來他的動作是舞蹈，不是單純的灑粉&amp;hellip;嗯，其實舞蹈也滿好看的嘛 :P&lt;/p&gt;
&lt;p&gt;嘟嘟跟成華都有口頭禪，嘟嘟說的是「我知道，然後呢？」，成華總是跟人家說「我們可不可以說說話？」『說什麼？』「說話啊。」雖然注意到，但是卻不曉得有什麼特別的意義？噢&amp;hellip;小海常常罵髒話這算口頭禪嗎？XD&lt;/p&gt;
&lt;p&gt;啊對了，小海跟嘟嘟都抽煙耶&amp;hellip;雖然看過影痴謀殺以後，我對於他們在舞台上點煙、抽煙已經不太意外了，可是沒想到他們都真抽&amp;hellip;實在很好奇你們是平常就抽煙，還是為了表演特地抽的呢？(不會抽煙的人抽煙會嗆到是真的還假的&amp;hellip;？)&lt;/p&gt;
&lt;p&gt;令人摸不透的文媛，總是靜靜的，像月亮，冷冷的。雖然是重要角色，卻從不突出。白色的衣服很美，卻飄逸的拉開了距離。噢，文媛聽嘟嘟和小妹解釋照片的那一幕，他們解釋的照片就是最後的喜宴會場啊！可是講真的，第一次聽根本就搞不清楚他們在講什麼嘛= = 有夠複雜的XD&lt;/p&gt;
&lt;p&gt;飾演小妹的演員也是熟面孔了，也是我覺得對自己的演技在做出最大突破的一位演員。雖然從不是主角，但卻一直相當用心的扮演好他的配角，人物的性格很明顯，很棒。那句「男人會喜歡」實在有被戳中&amp;hellip;.XD 好傻好天真XDDD 還有這次做了相當大的犧牲啊&amp;hellip;.@@&lt;/p&gt;
&lt;p&gt;成華講話一直都是慢慢的、溫和的，可是當中也會藏一些笑點。像是他答應文媛的求婚(?)的時候&amp;hellip;.呃&amp;hellip;..我不會說耶，就很北七XD 還有他跟小女人在酒店的時候&amp;hellip;.『我幫你洗澡&amp;hellip;要不要？』「要。」為什麼連這種話都可以這麼好笑&amp;hellip;..XD&lt;/p&gt;
&lt;p&gt;說到小女人，他實在很酷。我印象最深刻的就是小海與男播音員吵架的時候，他幾句話就讓小海冷靜了下來&amp;hellip;「你在發瘋啊！」「你恨他嗎？」「走不走？」也許他是最了解小海的人，也或許他能夠洞察未來的變化，但是&amp;hellip;.就是很酷XD&lt;/p&gt;
&lt;p&gt;男播音員的出場次數不多，戲份也少，唯一的一次比較有份量的，就是他的內心獨白。嗯，其實我覺得不是相當令人印象深刻就是了&amp;hellip;..@@&lt;/p&gt;
&lt;p&gt;烏龜則是一個很有趣的人，他的台詞幾乎都有梗啊XD 而且感覺演起來好像很累，因為要一直用奇妙的方式講話&amp;hellip;.欸&amp;hellip;應該不是本來就這樣吧？XD&lt;/p&gt;
&lt;p&gt;嘟嘟&amp;hellip;這次的轉變讓我嚇到啊XDDD 特別是第一次出場的時候，看到大紅色外套、大紅鞋&amp;hellip;這太驚嚇了XD 嘟嘟是一個心中相當熱情的女人，也相當有個性，我感覺到了~&lt;/p&gt;
&lt;p&gt;小海依然是很多獨角戲，有時候還會忘記其實你電話的那一頭是沒有人的&amp;hellip;&lt;/p&gt;
&lt;p&gt;以我認識的三位演員來講，因為看過你們過去的演出，所以也特別對你們的演技有感覺，很棒，真的。至於不認識的其他幾位，也可以感覺出你們的用心，辛苦你們了 :)&lt;/p&gt;
&lt;p&gt;說真的，我實在很不會評論像是服裝、燈光、音樂、演技還是舞台之類的&amp;hellip;因為其實我也不曉得到底這些部分有什麼樣的困難，或是怎樣算是表現得相當好。以一個觀眾的角度來看，我知道大部分都做得很好，只有當中有出一些小差錯而已。辛苦了 :)&lt;/p&gt;
&lt;p&gt;好像想講的都講得差不多了&amp;hellip;不曉得該怎麼結尾XD 其實心裡還有些想法，是從劇情裡面衍生出來的，可是我也不曉得該怎麼描述，大概&amp;hellip;就像是一種心情而已吧？&lt;/p&gt;
&lt;p&gt;謝謝面劇團，你們以後也要繼續加油喔！如果是決定好好念書的小朋友 (突然就從粉絲變學長了)，也要好好加油，祝福你們都有很美好的未來。&lt;/p&gt;
&lt;p&gt;下次的演出&amp;hellip;我想也只能「空中」再見了&amp;hellip;.哈~&lt;/p&gt;
- https://blog.crboy.net/posts/%E6%98%8E%E5%A4%A9%E6%88%91%E5%80%91%E7%A9%BA%E4%B8%AD%E5%86%8D%E8%A6%8B/ - </description>
        </item>
    
    
  </channel>
</rss> 